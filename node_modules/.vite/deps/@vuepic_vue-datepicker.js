import {
  Fragment,
  Teleport,
  Transition,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  defineComponent,
  getCurrentScope,
  guardReactiveProps,
  inject,
  isRef,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onBeforeUpdate,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  provide,
  reactive,
  ref,
  renderList,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString,
  toRef,
  unref,
  useSlots,
  vShow,
  watch,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers
} from "./chunk-U2LQBB2R.js";
import "./chunk-JC4IRQUL.js";

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/addDays/index.js
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}

// node_modules/date-fns/esm/addMonths/index.js
function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();
  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

// node_modules/date-fns/esm/add/index.js
function add(dirtyDate, duration) {
  requiredArgs(2, arguments);
  if (!duration || typeof duration !== "object")
    return new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var date = toDate(dirtyDate);
  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date;
  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;
  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1e3;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/startOfWeek/index.js
function startOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/startOfISOWeek/index.js
function startOfISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  return startOfWeek(dirtyDate, {
    weekStartsOn: 1
  });
}

// node_modules/date-fns/esm/getISOWeekYear/index.js
function getISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/startOfISOWeekYear/index.js
function startOfISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/startOfDay/index.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/differenceInCalendarDays/index.js
var MILLISECONDS_IN_DAY = 864e5;
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

// node_modules/date-fns/esm/addYears/index.js
function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

// node_modules/date-fns/esm/constants/index.js
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var minTime = -maxTime;

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/eachDayOfInterval/index.js
function eachDayOfInterval(dirtyInterval, options) {
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
  var endTime = endDate.getTime();
  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError("Invalid interval");
  }
  var dates = [];
  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);
  var step = options && "step" in options ? Number(options.step) : 1;
  if (step < 1 || isNaN(step))
    throw new RangeError("`options.step` must be a number greater than 1");
  while (currentDate.getTime() <= endTime) {
    dates.push(toDate(currentDate));
    currentDate.setDate(currentDate.getDate() + step);
    currentDate.setHours(0, 0, 0, 0);
  }
  return dates;
}

// node_modules/date-fns/esm/endOfWeek/index.js
function endOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  date.setDate(date.getDate() + diff);
  date.setHours(23, 59, 59, 999);
  return date;
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY2 = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY2) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  y: function(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  M: function(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  h: function(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function(date, token) {
    var numberOfDigits = token.length;
    var milliseconds2 = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds2 * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  G: function(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  y: function(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  Y: function(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  R: function(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  q: function(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  M: function(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  L: function(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  w: function(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  D: function(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  e: function(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  c: function(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  i: function(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  a: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  b: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  B: function(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  h: function(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  H: function(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  K: function(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  s: function(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  S: function(date, token) {
    return lightFormatters_default.S(date, token);
  },
  X: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  x: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  O: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  z: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  t: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
function dateLongFormatter(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
}
function timeLongFormatter(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
}
function dateTimeLongFormatter(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
}
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale2 = options.locale || en_US_default;
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong, formatterOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/date-fns/esm/_lib/assign/index.js
function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError("assign requires that input parameter not be null or undefined");
  }
  dirtyObject = dirtyObject || {};
  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }
  return target;
}

// node_modules/date-fns/esm/formatDistanceStrict/index.js
var MILLISECONDS_IN_MINUTE = 1e3 * 60;
var MINUTES_IN_DAY = 60 * 24;
var MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;
var MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;

// node_modules/date-fns/esm/getDay/index.js
function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}

// node_modules/date-fns/esm/getDaysInMonth/index.js
function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth2 = new Date(0);
  lastDayOfMonth2.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth2.setHours(0, 0, 0, 0);
  return lastDayOfMonth2.getDate();
}

// node_modules/date-fns/esm/getHours/index.js
function getHours(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var hours = date.getHours();
  return hours;
}

// node_modules/date-fns/esm/getISOWeek/index.js
var MILLISECONDS_IN_WEEK3 = 6048e5;
function getISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK3) + 1;
}

// node_modules/date-fns/esm/getMinutes/index.js
function getMinutes(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var minutes = date.getMinutes();
  return minutes;
}

// node_modules/date-fns/esm/getMonth/index.js
function getMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  return month;
}

// node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js
var MILLISECONDS_IN_DAY3 = 24 * 60 * 60 * 1e3;

// node_modules/date-fns/esm/getSeconds/index.js
function getSeconds(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var seconds = date.getSeconds();
  return seconds;
}

// node_modules/date-fns/esm/getYear/index.js
function getYear(dirtyDate) {
  requiredArgs(1, arguments);
  return toDate(dirtyDate).getFullYear();
}

// node_modules/date-fns/esm/subDays/index.js
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}

// node_modules/date-fns/esm/subMonths/index.js
function subMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, -amount);
}

// node_modules/date-fns/esm/sub/index.js
function sub(date, duration) {
  requiredArgs(2, arguments);
  if (!duration || typeof duration !== "object")
    return new Date(NaN);
  var years = duration.years ? toInteger(duration.years) : 0;
  var months = duration.months ? toInteger(duration.months) : 0;
  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;
  var days = duration.days ? toInteger(duration.days) : 0;
  var hours = duration.hours ? toInteger(duration.hours) : 0;
  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;
  var seconds = duration.seconds ? toInteger(duration.seconds) : 0;
  var dateWithoutMonths = subMonths(date, months + years * 12);
  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7);
  var minutestoSub = minutes + hours * 60;
  var secondstoSub = seconds + minutestoSub * 60;
  var mstoSub = secondstoSub * 1e3;
  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);
  return finalDate;
}

// node_modules/date-fns/esm/isAfter/index.js
function isAfter(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() > dateToCompare.getTime();
}

// node_modules/date-fns/esm/isBefore/index.js
function isBefore(dirtyDate, dirtyDateToCompare) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var dateToCompare = toDate(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

// node_modules/date-fns/esm/isEqual/index.js
function isEqual(dirtyLeftDate, dirtyRightDate) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyLeftDate);
  var dateRight = toDate(dirtyRightDate);
  return dateLeft.getTime() === dateRight.getTime();
}

// node_modules/date-fns/esm/_lib/setUTCDay/index.js
function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  requiredArgs(2, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = toInteger(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCISODay/index.js
function setUTCISODay(dirtyDate, dirtyDay) {
  requiredArgs(2, arguments);
  var day = toInteger(dirtyDay);
  if (day % 7 === 0) {
    day = day - 7;
  }
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/_lib/setUTCWeek/index.js
function setUTCWeek(dirtyDate, dirtyWeek, options) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

// node_modules/date-fns/esm/parse/_lib/parsers/index.js
var MILLISECONDS_IN_HOUR = 36e5;
var MILLISECONDS_IN_MINUTE2 = 6e4;
var MILLISECONDS_IN_SECOND = 1e3;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  date: /^(3[0-1]|[0-2]?\d)/,
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  week: /^(5[0-3]|[0-4]?\d)/,
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  hour11h: /^(1[0-1]|0?\d)/,
  hour12h: /^(1[0-2]|0?\d)/,
  minute: /^[0-5]?\d/,
  second: /^[0-5]?\d/,
  singleDigit: /^\d/,
  twoDigits: /^\d{1,2}/,
  threeDigits: /^\d{1,3}/,
  fourDigits: /^\d{1,4}/,
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  twoDigitsSigned: /^-?\d{1,2}/,
  threeDigitsSigned: /^-?\d{1,3}/,
  fourDigitsSigned: /^-?\d{1,4}/
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);
  if (!matchResult) {
    return null;
  }
  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: string.slice(1)
    };
  }
  var sign = matchResult[1] === "+" ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE2 + seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}
function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), string, valueCallback);
  }
}
function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), string, valueCallback);
  }
}
function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
var parsers = {
  G: {
    priority: 140,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "G":
        case "GG":
        case "GGG":
          return match2.era(string, {
            width: "abbreviated"
          }) || match2.era(string, {
            width: "narrow"
          });
        case "GGGGG":
          return match2.era(string, {
            width: "narrow"
          });
        case "GGGG":
        default:
          return match2.era(string, {
            width: "wide"
          }) || match2.era(string, {
            width: "abbreviated"
          }) || match2.era(string, {
            width: "narrow"
          });
      }
    },
    set: function(date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["R", "u", "t", "T"]
  },
  y: {
    priority: 130,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(year) {
        return {
          year,
          isTwoDigitYear: token === "yy"
        };
      };
      switch (token) {
        case "y":
          return parseNDigits(4, string, valueCallback);
        case "yo":
          return match2.ordinalNumber(string, {
            unit: "year",
            valueCallback
          });
        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]
  },
  Y: {
    priority: 130,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(year) {
        return {
          year,
          isTwoDigitYear: token === "YY"
        };
      };
      switch (token) {
        case "Y":
          return parseNDigits(4, string, valueCallback);
        case "Yo":
          return match2.ordinalNumber(string, {
            unit: "year",
            valueCallback
          });
        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function(_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function(date, flags, value, options) {
      var currentYear = getUTCWeekYear(date, options);
      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options);
      }
      var year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options);
    },
    incompatibleTokens: ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]
  },
  R: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === "R") {
        return parseNDigitsSigned(4, string);
      }
      return parseNDigitsSigned(token.length, string);
    },
    set: function(_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear);
    },
    incompatibleTokens: ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
  },
  u: {
    priority: 130,
    parse: function(string, token, _match, _options) {
      if (token === "u") {
        return parseNDigitsSigned(4, string);
      }
      return parseNDigitsSigned(token.length, string);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]
  },
  Q: {
    priority: 120,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "Q":
        case "QQ":
          return parseNDigits(token.length, string);
        case "Qo":
          return match2.ordinalNumber(string, {
            unit: "quarter"
          });
        case "QQQ":
          return match2.quarter(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQQ":
          return match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
        case "QQQQ":
        default:
          return match2.quarter(string, {
            width: "wide",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
  },
  q: {
    priority: 120,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "q":
        case "qq":
          return parseNDigits(token.length, string);
        case "qo":
          return match2.ordinalNumber(string, {
            unit: "quarter"
          });
        case "qqq":
          return match2.quarter(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqqq":
          return match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
        case "qqqq":
        default:
          return match2.quarter(string, {
            width: "wide",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.quarter(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]
  },
  M: {
    priority: 110,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };
      switch (token) {
        case "M":
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        case "MM":
          return parseNDigits(2, string, valueCallback);
        case "Mo":
          return match2.ordinalNumber(string, {
            unit: "month",
            valueCallback
          });
        case "MMM":
          return match2.month(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMMM":
          return match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
        case "MMMM":
        default:
          return match2.month(string, {
            width: "wide",
            context: "formatting"
          }) || match2.month(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.month(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  L: {
    priority: 110,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        return value - 1;
      };
      switch (token) {
        case "L":
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        case "LL":
          return parseNDigits(2, string, valueCallback);
        case "Lo":
          return match2.ordinalNumber(string, {
            unit: "month",
            valueCallback
          });
        case "LLL":
          return match2.month(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLLL":
          return match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
        case "LLLL":
        default:
          return match2.month(string, {
            width: "wide",
            context: "standalone"
          }) || match2.month(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.month(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  w: {
    priority: 100,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, string);
        case "wo":
          return match2.ordinalNumber(string, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options);
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]
  },
  I: {
    priority: 100,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, string);
        case "Io":
          return match2.ordinalNumber(string, {
            unit: "week"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function(date, _flags, value, options) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);
    },
    incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]
  },
  d: {
    priority: 90,
    subPriority: 1,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, string);
        case "do":
          return match2.ordinalNumber(string, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      var month = date.getUTCMonth();
      if (isLeapYear2) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]
  },
  D: {
    priority: 90,
    subPriority: 1,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, string);
        case "Do":
          return match2.ordinalNumber(string, {
            unit: "date"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear2 = isLeapYearIndex(year);
      if (isLeapYear2) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]
  },
  E: {
    priority: 90,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "E":
        case "EE":
        case "EEE":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEE":
          return match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEEEE":
          return match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "EEEE":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["D", "i", "e", "c", "t", "T"]
  },
  e: {
    priority: 90,
    parse: function(string, token, match2, options) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "e":
        case "ee":
          return parseNDigits(token.length, string, valueCallback);
        case "eo":
          return match2.ordinalNumber(string, {
            unit: "day",
            valueCallback
          });
        case "eee":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeee":
          return match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeeeee":
          return match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
        case "eeee":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(string, {
            width: "short",
            context: "formatting"
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]
  },
  c: {
    priority: 90,
    parse: function(string, token, match2, options) {
      var valueCallback = function(value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };
      switch (token) {
        case "c":
        case "cc":
          return parseNDigits(token.length, string, valueCallback);
        case "co":
          return match2.ordinalNumber(string, {
            unit: "day",
            valueCallback
          });
        case "ccc":
          return match2.day(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "ccccc":
          return match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "cccccc":
          return match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
        case "cccc":
        default:
          return match2.day(string, {
            width: "wide",
            context: "standalone"
          }) || match2.day(string, {
            width: "abbreviated",
            context: "standalone"
          }) || match2.day(string, {
            width: "short",
            context: "standalone"
          }) || match2.day(string, {
            width: "narrow",
            context: "standalone"
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function(date, _flags, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]
  },
  i: {
    priority: 90,
    parse: function(string, token, match2, _options) {
      var valueCallback = function(value) {
        if (value === 0) {
          return 7;
        }
        return value;
      };
      switch (token) {
        case "i":
        case "ii":
          return parseNDigits(token.length, string);
        case "io":
          return match2.ordinalNumber(string, {
            unit: "day"
          });
        case "iii":
          return match2.day(string, {
            width: "abbreviated",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiiii":
          return match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiiiii":
          return match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
        case "iiii":
        default:
          return match2.day(string, {
            width: "wide",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "abbreviated",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "short",
            context: "formatting",
            valueCallback
          }) || match2.day(string, {
            width: "narrow",
            context: "formatting",
            valueCallback
          });
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function(date, _flags, value, options) {
      date = setUTCISODay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]
  },
  a: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaaa":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["b", "B", "H", "k", "t", "T"]
  },
  b: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbbb":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "B", "H", "k", "t", "T"]
  },
  B: {
    priority: 80,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBBB":
          return match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return match2.dayPeriod(string, {
            width: "wide",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.dayPeriod(string, {
            width: "narrow",
            context: "formatting"
          });
      }
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "t", "T"]
  },
  h: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, string);
        case "ho":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    },
    incompatibleTokens: ["H", "K", "k", "t", "T"]
  },
  H: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, string);
        case "Ho":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "h", "K", "k", "t", "T"]
  },
  K: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, string);
        case "Ko":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function(date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date;
    },
    incompatibleTokens: ["h", "H", "k", "t", "T"]
  },
  k: {
    priority: 70,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, string);
        case "ko":
          return match2.ordinalNumber(string, {
            unit: "hour"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function(date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ["a", "b", "h", "H", "K", "t", "T"]
  },
  m: {
    priority: 60,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, string);
        case "mo":
          return match2.ordinalNumber(string, {
            unit: "minute"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  s: {
    priority: 50,
    parse: function(string, token, match2, _options) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, string);
        case "so":
          return match2.ordinalNumber(string, {
            unit: "second"
          });
        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function(_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function(date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  S: {
    priority: 30,
    parse: function(string, token, _match, _options) {
      var valueCallback = function(value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };
      return parseNDigits(token.length, string, valueCallback);
    },
    set: function(date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ["t", "T"]
  },
  X: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case "X":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, string);
        case "XXXX":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
        case "XXXXX":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ["t", "T", "x"]
  },
  x: {
    priority: 10,
    parse: function(string, token, _match, _options) {
      switch (token) {
        case "x":
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, string);
        case "xxxx":
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);
        case "xxxxx":
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function(date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }
      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ["t", "T", "X"]
  },
  t: {
    priority: 40,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [new Date(value * 1e3), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: "*"
  },
  T: {
    priority: 20,
    parse: function(string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function(_date, _flags, value, _options) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: "*"
  }
};
var parsers_default = parsers;

// node_modules/date-fns/esm/parse/index.js
var TIMEZONE_UNIT_PRIORITY = 10;
var formattingTokensRegExp2 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp2 = /^'([^]*?)'?$/;
var doubleQuoteRegExp2 = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp2 = /[a-zA-Z]/;
function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options = dirtyOptions || {};
  var locale2 = options.locale || en_US_default;
  if (!locale2.match) {
    throw new RangeError("locale must contain match property");
  }
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (formatString === "") {
    if (dateString === "") {
      return toDate(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }
  var subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2
  };
  var setters = [{
    priority: TIMEZONE_UNIT_PRIORITY,
    subPriority: -1,
    set: dateToSystemTimezone,
    index: 0
  }];
  var i;
  var tokens = formatString.match(longFormattingTokensRegExp2).map(function(substring) {
    var firstCharacter2 = substring[0];
    if (firstCharacter2 === "p" || firstCharacter2 === "P") {
      var longFormatter = longFormatters_default[firstCharacter2];
      return longFormatter(substring, locale2.formatLong, subFnOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp2);
  var usedTokens = [];
  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }
    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
      throwProtectedError(token, formatString, dirtyDateString);
    }
    var firstCharacter = token[0];
    var parser = parsers_default[firstCharacter];
    if (parser) {
      var incompatibleTokens = parser.incompatibleTokens;
      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;
        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;
          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }
        if (incompatibleToken) {
          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        }
      } else if (parser.incompatibleTokens === "*" && usedTokens.length) {
        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
      }
      usedTokens.push({
        token: firstCharacter,
        fullToken: token
      });
      var parseResult = parser.parse(dateString, token, locale2.match, subFnOptions);
      if (!parseResult) {
        return new Date(NaN);
      }
      setters.push({
        priority: parser.priority,
        subPriority: parser.subPriority || 0,
        set: parser.set,
        validate: parser.validate,
        value: parseResult.value,
        index: setters.length
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp2)) {
        throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
      }
      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString2(token);
      }
      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a, b) {
    return b - a;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  });
  var date = toDate(dirtyReferenceDate);
  if (isNaN(date)) {
    return new Date(NaN);
  }
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
  var flags = {};
  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];
    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
      return new Date(NaN);
    }
    var result = setter.set(utcDate, flags, setter.value, subFnOptions);
    if (result[0]) {
      utcDate = result[0];
      assign(flags, result[1]);
    } else {
      utcDate = result;
    }
  }
  return utcDate;
}
function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }
  var convertedDate = new Date(0);
  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
  return convertedDate;
}
function cleanEscapedString2(input) {
  return input.match(escapedStringRegExp2)[1].replace(doubleQuoteRegExp2, "'");
}

// node_modules/date-fns/esm/parseISO/index.js
function parseISO(argument, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var additionalDigits = options.additionalDigits == null ? 2 : toInteger(options.additionalDigits);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError("additionalDigits must be 0, 1 or 2");
  }
  if (!(typeof argument === "string" || Object.prototype.toString.call(argument) === "[object String]")) {
    return new Date(NaN);
  }
  var dateStrings = splitDateString(argument);
  var date;
  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }
  if (!date || isNaN(date.getTime())) {
    return new Date(NaN);
  }
  var timestamp = date.getTime();
  var time = 0;
  var offset;
  if (dateStrings.time) {
    time = parseTime(dateStrings.time);
    if (isNaN(time)) {
      return new Date(NaN);
    }
  }
  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);
    if (isNaN(offset)) {
      return new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time);
    var result = new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }
  return new Date(timestamp + time + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString;
  if (array.length > 2) {
    return dateStrings;
  }
  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }
  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], "");
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }
  return dateStrings;
}
function parseYear(dateString, additionalDigits) {
  var regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
  var captures = dateString.match(regex);
  if (!captures)
    return {
      year: NaN,
      restDateString: ""
    };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null;
  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}
function parseDate(dateString, year) {
  if (year === null)
    return new Date(NaN);
  var captures = dateString.match(dateRegex);
  if (!captures)
    return new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;
  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return new Date(NaN);
    }
    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = new Date(0);
    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return new Date(NaN);
    }
    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}
function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures)
    return NaN;
  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);
  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }
  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
}
function parseTimeUnit(value) {
  return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
  if (timezoneString === "Z")
    return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures)
    return 0;
  var sign = captures[1] === "+" ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;
  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }
  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex2(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex2(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex2(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }
  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

// node_modules/date-fns/esm/setMonth/index.js
function setMonth(dirtyDate, dirtyMonth) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var month = toInteger(dirtyMonth);
  var year = date.getFullYear();
  var day = date.getDate();
  var dateWithDesiredMonth = new Date(0);
  dateWithDesiredMonth.setFullYear(year, month, 15);
  dateWithDesiredMonth.setHours(0, 0, 0, 0);
  var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
  date.setMonth(month, Math.min(day, daysInMonth));
  return date;
}

// node_modules/date-fns/esm/set/index.js
function set(dirtyDate, values) {
  requiredArgs(2, arguments);
  if (typeof values !== "object" || values === null) {
    throw new RangeError("values parameter must be an object");
  }
  var date = toDate(dirtyDate);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  if (values.year != null) {
    date.setFullYear(values.year);
  }
  if (values.month != null) {
    date = setMonth(date, values.month);
  }
  if (values.date != null) {
    date.setDate(toInteger(values.date));
  }
  if (values.hours != null) {
    date.setHours(toInteger(values.hours));
  }
  if (values.minutes != null) {
    date.setMinutes(toInteger(values.minutes));
  }
  if (values.seconds != null) {
    date.setSeconds(toInteger(values.seconds));
  }
  if (values.milliseconds != null) {
    date.setMilliseconds(toInteger(values.milliseconds));
  }
  return date;
}

// node_modules/date-fns/esm/setHours/index.js
function setHours(dirtyDate, dirtyHours) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var hours = toInteger(dirtyHours);
  date.setHours(hours);
  return date;
}

// node_modules/date-fns/esm/setMilliseconds/index.js
function setMilliseconds(dirtyDate, dirtyMilliseconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var milliseconds2 = toInteger(dirtyMilliseconds);
  date.setMilliseconds(milliseconds2);
  return date;
}

// node_modules/date-fns/esm/setMinutes/index.js
function setMinutes(dirtyDate, dirtyMinutes) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var minutes = toInteger(dirtyMinutes);
  date.setMinutes(minutes);
  return date;
}

// node_modules/date-fns/esm/setSeconds/index.js
function setSeconds(dirtyDate, dirtySeconds) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var seconds = toInteger(dirtySeconds);
  date.setSeconds(seconds);
  return date;
}

// node_modules/date-fns/esm/setYear/index.js
function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear);
  if (isNaN(date.getTime())) {
    return new Date(NaN);
  }
  date.setFullYear(year);
  return date;
}

// node_modules/date-fns/esm/subYears/index.js
function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}

// node_modules/@vuepic/vue-datepicker/dist/vue-datepicker.es.js
var ya = Object.defineProperty;
var ha = Object.defineProperties;
var ga = Object.getOwnPropertyDescriptors;
var kn = Object.getOwnPropertySymbols;
var wa = Object.prototype.hasOwnProperty;
var ka = Object.prototype.propertyIsEnumerable;
var bn = (e, a, n) => a in e ? ya(e, a, { enumerable: true, configurable: true, writable: true, value: n }) : e[a] = n;
var J = (e, a) => {
  for (var n in a || (a = {}))
    wa.call(a, n) && bn(e, n, a[n]);
  if (kn)
    for (var n of kn(a))
      ka.call(a, n) && bn(e, n, a[n]);
  return e;
};
var De = (e, a) => ha(e, ga(a));
var rt = (e, a) => {
  const n = e.__vccOpts || e;
  for (const [t, i] of a)
    n[t] = i;
  return n;
};
var Fa = {};
var Ea = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var La = createBaseVNode("path", { d: "M29.333 8c0-2.208-1.792-4-4-4h-18.667c-2.208 0-4 1.792-4 4v18.667c0 2.208 1.792 4 4 4h18.667c2.208 0 4-1.792 4-4v-18.667zM26.667 8v18.667c0 0.736-0.597 1.333-1.333 1.333 0 0-18.667 0-18.667 0-0.736 0-1.333-0.597-1.333-1.333 0 0 0-18.667 0-18.667 0-0.736 0.597-1.333 1.333-1.333 0 0 18.667 0 18.667 0 0.736 0 1.333 0.597 1.333 1.333z" }, null, -1);
var Ka = createBaseVNode("path", { d: "M20 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z" }, null, -1);
var Ha = createBaseVNode("path", { d: "M9.333 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z" }, null, -1);
var Wa = createBaseVNode("path", { d: "M4 14.667h24c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333h-24c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333z" }, null, -1);
var Ua = [La, Ka, Ha, Wa];
function ja(e, a) {
  return openBlock(), createElementBlock("svg", Ea, Ua);
}
var Yt = rt(Fa, [["render", ja]]);
var Ga = {};
var za = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var Xa = createBaseVNode("path", { d: "M23.057 7.057l-16 16c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l16-16c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0z" }, null, -1);
var qa = createBaseVNode("path", { d: "M7.057 8.943l16 16c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885l-16-16c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z" }, null, -1);
var Ja = [Xa, qa];
function Za(e, a) {
  return openBlock(), createElementBlock("svg", za, Ja);
}
var Qa = rt(Ga, [["render", Za]]);
var xa = {};
var el = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var tl = createBaseVNode("path", { d: "M20.943 23.057l-7.057-7.057c0 0 7.057-7.057 7.057-7.057 0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-8 8c-0.521 0.521-0.521 1.365 0 1.885l8 8c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z" }, null, -1);
var nl = [tl];
function al(e, a) {
  return openBlock(), createElementBlock("svg", el, nl);
}
var _n = rt(xa, [["render", al]]);
var ll = {};
var rl = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var ol = createBaseVNode("path", { d: "M12.943 24.943l8-8c0.521-0.521 0.521-1.365 0-1.885l-8-8c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885l7.057 7.057c0 0-7.057 7.057-7.057 7.057-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0z" }, null, -1);
var sl = [ol];
function ul(e, a) {
  return openBlock(), createElementBlock("svg", rl, sl);
}
var Rn = rt(ll, [["render", ul]]);
var il = {};
var dl = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var cl = createBaseVNode("path", { d: "M16 1.333c-8.095 0-14.667 6.572-14.667 14.667s6.572 14.667 14.667 14.667c8.095 0 14.667-6.572 14.667-14.667s-6.572-14.667-14.667-14.667zM16 4c6.623 0 12 5.377 12 12s-5.377 12-12 12c-6.623 0-12-5.377-12-12s5.377-12 12-12z" }, null, -1);
var ml = createBaseVNode("path", { d: "M14.667 8v8c0 0.505 0.285 0.967 0.737 1.193l5.333 2.667c0.658 0.329 1.46 0.062 1.789-0.596s0.062-1.46-0.596-1.789l-4.596-2.298c0 0 0-7.176 0-7.176 0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z" }, null, -1);
var pl = [cl, ml];
function vl(e, a) {
  return openBlock(), createElementBlock("svg", dl, pl);
}
var On = rt(il, [["render", vl]]);
var fl = {};
var yl = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var hl = createBaseVNode("path", { d: "M24.943 19.057l-8-8c-0.521-0.521-1.365-0.521-1.885 0l-8 8c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l7.057-7.057c0 0 7.057 7.057 7.057 7.057 0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z" }, null, -1);
var gl = [hl];
function wl(e, a) {
  return openBlock(), createElementBlock("svg", yl, gl);
}
var Vn = rt(fl, [["render", wl]]);
var kl = {};
var bl = { version: "1.1", xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", viewBox: "0 0 32 32", class: "dp__icon" };
var $l = createBaseVNode("path", { d: "M7.057 12.943l8 8c0.521 0.521 1.365 0.521 1.885 0l8-8c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-7.057 7.057c0 0-7.057-7.057-7.057-7.057-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z" }, null, -1);
var Dl = [$l];
function Ml(e, a) {
  return openBlock(), createElementBlock("svg", bl, Dl);
}
var Bn = rt(kl, [["render", Ml]]);
var Qt = (e, a) => {
  const n = parse(e, a.slice(0, e.length), new Date());
  return isValid(n) && isDate(n) ? n : null;
};
var Le = (e) => {
  let a = new Date(JSON.parse(JSON.stringify(e)));
  return a = setHours(a, 0), a = setMinutes(a, 0), a = setSeconds(a, 0), a = setMilliseconds(a, 0), a;
};
var xt = (e) => Array.isArray(e) ? isValid(e[0]) && (e[1] ? isValid(e[1]) : true) : e ? isValid(e) : false;
var Ae = (e, a, n, t) => {
  let i = e ? new Date(e) : new Date();
  return (a || a === 0) && (i = setHours(i, +a)), (n || n === 0) && (i = setMinutes(i, +n)), (t || t === 0) && (i = setSeconds(i, +t)), setMilliseconds(i, 0);
};
var Sl = (e) => {
  const a = addMonths(e, 1);
  return { month: getMonth(a), year: getYear(a) };
};
var ot = (e, a, n) => {
  let t = e ? new Date(e) : new Date();
  return (a || a === 0) && (t = setMonth(t, a)), n && (t = setYear(t, n)), t;
};
var Nn = (e, a) => e ? `HH:mm${a ? ":ss" : ""}` : `hh:mm${a ? ":ss" : ""} aa`;
var In = (e, a, n, t, i, m, v, p) => e || (t ? "MM/yyyy" : i ? Nn(a, n) : m ? "MM/dd/yyyy" : v ? "yyyy" : p ? `MM/dd/yyyy, ${Nn(a, n)}` : "MM/dd/yyyy");
var en = (e) => {
  const a = e || new Date();
  return { hours: getHours(a), minutes: getMinutes(a), seconds: getSeconds(a) };
};
var Ft = (e) => ({ month: getMonth(e), year: getYear(e) });
var Yn = (e) => Array.isArray(e) ? [Ft(e[0]), e[1] ? Ft(e[1]) : null] : Ft(e);
var tn = (e) => Array.isArray(e) ? [en(e[0]), en(e[1])] : en(e);
var nn = (e, a, n) => n ? format(e, a, { locale: n }) : format(e, a);
var pt = (e, a, n, t, i) => Array.isArray(e) ? `${nn(e[0], a, n)} ${i && !e[1] ? "" : t || "-"} ${e[1] ? nn(e[1], a, n) : ""}` : nn(e, a, n);
var Te = (e, a) => !e || !a ? false : isAfter(Le(e), Le(a));
var be = (e, a) => !e || !a ? false : isBefore(Le(e), Le(a));
var ie = (e, a) => !e || !a ? false : isEqual(Le(e), Le(a));
var Al = (e, a) => add(set(new Date(), e), a);
var Pl = (e, a) => sub(set(new Date(), e), a);
var an = (e) => set(new Date(), { hours: getHours(e), minutes: getMinutes(e), seconds: getSeconds(e) });
var Fn = (e) => set(new Date(), { hours: +e.hours || 0, minutes: +e.minutes || 0, seconds: +e.seconds || 0 });
var ln = (e, a, n) => {
  let t = true;
  if (!e)
    return true;
  const i = Array.isArray(e) ? [e[0] ? an(e[0]) : null, e[1] ? an(e[1]) : null] : an(e);
  if (a) {
    const m = Fn(a);
    Array.isArray(i) ? t = (i[0] ? i[0].getTime() <= m.getTime() : true) && (i[1] ? i[1].getTime() <= m.getTime() : true) : t = i.getTime() <= m.getTime();
  }
  if (n) {
    const m = Fn(n);
    Array.isArray(i) ? t = (i[0] ? i[0].getTime() >= m.getTime() : true) && (i[1] ? i[1].getTime() >= m.getTime() : true) && t : t = i.getTime() >= m.getTime() && t;
  }
  return t;
};
var Cl = (e, a, n) => {
  let t = true;
  return a && n && (t = Te(new Date(e), new Date(a)) && be(new Date(e), new Date(n))), a && (t = Te(new Date(e), new Date(a))), n && (t = be(new Date(e), new Date(n))), t;
};
var _e = (e) => e instanceof Date ? e : parseISO(e);
var En = (e, a, n) => e && e[0] && e[1] ? Te(n, e[0]) && be(n, e[1]) : e && e[0] && a ? Te(n, e[0]) && be(n, a) || be(n, e[0]) && Te(n, a) : false;
var Et = (e, a) => {
  const n = startOfWeek(e, { weekStartsOn: a }), t = endOfWeek(e, { weekStartsOn: a });
  return [n, t];
};
var Tl = (e, a, n, t, i, m, v, p) => {
  const y = n ? Te(_e(e), _e(n)) : false, _ = a ? be(_e(e), _e(a)) : false, E = typeof t == "function" ? t(e) : t.some((z) => ie(_e(z), _e(e))), w = (m.months.length ? m.months.map((z) => +z) : []).includes(getMonth(e)), V = v.length ? v.some((z) => +z === getDay(e)) : false, Y = i.length ? !i.some((z) => ie(_e(z), _e(e))) : false, F = getYear(e), H = F < +p[0] || F > +p[1];
  return !(y || _ || E || w || H || V || Y);
};
var Ln = (e, a, n, t, i, m, v) => ({ validate: (p) => Tl(p, e, a, n, t, i, m, v) });
var _l = (e, a, n) => {
  const t = new Date(JSON.parse(JSON.stringify(e))), i = [];
  for (let m = 0; m < 7; m++) {
    const v = addDays(t, m), p = getMonth(v) !== a;
    i.push({ text: n && p ? "" : v.getDate(), value: v, current: !p });
  }
  return i;
};
var Rl = (e, a, n, t) => {
  const i = [], m = new Date(a, e), v = new Date(a, e + 1, 0), p = startOfWeek(m, { weekStartsOn: n }), y = (_) => {
    const E = _l(_, e, t);
    if (i.push({ days: E }), !i[i.length - 1].days.some((w) => ie(Le(w.value), Le(v)))) {
      const w = addDays(_, 7);
      y(w);
    }
  };
  return y(p), i;
};
var Ol = (e, a = 3) => {
  const n = [];
  for (let t = 0; t < e.length; t += a)
    n.push([e[t], e[t + 1], e[t + 2]]);
  return n;
};
var Vl = (e, a) => {
  const n = [1, 2, 3, 4, 5, 6, 7].map((m) => new Intl.DateTimeFormat(e, { weekday: "short", timeZone: "UTC" }).format(new Date(`2017-01-0${m}T00:00:00+00:00`)).slice(0, 2)), t = n.slice(0, a), i = n.slice(a + 1, n.length);
  return [n[a]].concat(...i).concat(...t);
};
var Bl = (e) => {
  const a = [];
  for (let n = +e[0]; n <= +e[1]; n++)
    a.push({ value: +n, text: `${n}` });
  return a;
};
var Nl = (e, a) => {
  const n = new Intl.DateTimeFormat(e, { month: a, timeZone: "UTC" });
  return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((t) => {
    const i = t < 10 ? `0${t}` : t;
    return new Date(`2017-${i}-01T00:00:00+00:00`);
  }).map((t, i) => ({ text: n.format(t), value: i }));
};
var Il = (e) => [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11][e];
var Yl = () => ({ enterSubmit: true, tabSubmit: true, openMenu: true, rangeSeparator: " - " });
var Fl = (e) => Object.assign({ months: [], years: [], times: { hours: [], minutes: [], seconds: [] } }, e);
var El = (e) => {
  function a(n) {
    let t = "";
    const i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", m = i.length;
    for (let v = 0; v < n; v++)
      t += i.charAt(Math.floor(Math.random() * m));
    return t + e;
  }
  return a(5);
};
var he = (e) => {
  var n;
  const a = unref(e);
  return (n = a == null ? void 0 : a.$el) != null ? n : a;
};
var Ll = (e) => Object.assign({ type: "dot" }, e);
var Kn = (e) => Object.assign({ menuAppear: "dp-menu-appear", open: "dp-slide-down", close: "dp-slide-up", next: "calendar-next", previous: "calendar-prev", vNext: "dp-slide-up", vPrevious: "dp-slide-down" }, e);
var Kl = (e) => Object.assign({ toggleOverlay: "Toggle overlay", menu: "Datepicker menu", input: "Datepicker input", calendarWrap: "Calendar wrapper", calendarDays: "Calendar days", openTimePicker: "Open time picker", closeTimePicker: "Close time Picker", incrementValue: (a) => `Increment ${a}`, decrementValue: (a) => `Decrement ${a}`, openTpOverlay: (a) => `Open ${a} overlay`, amPmButton: "Switch AM/PM mode", openYearsOverlay: "Open years overlay", openMonthsOverlay: "Open months overlay", nextMonth: "Next month", prevMonth: "Previous month" }, e);
var Hn = (e) => Array.isArray(e) ? !!e[0] && !!e[1] : false;
var Xe = Symbol();
var Lt = Symbol();
var rn = Symbol();
var Wn = Symbol();
var Un = Symbol();
var qe = Symbol();
var on = { disabled: { type: Boolean, default: false }, readonly: { type: Boolean, default: false }, autoApply: { type: Boolean, default: false }, inline: { type: Boolean, default: false }, textInput: { type: Boolean, default: false } };
var sn = { range: { type: Boolean, default: false }, uid: { type: String, default: null } };
var jn = { enableSeconds: { type: Boolean, default: false }, is24: { type: Boolean, default: true }, noHoursOverlay: { type: Boolean, default: false }, noMinutesOverlay: { type: Boolean, default: false }, noSecondsOverlay: { type: Boolean, default: false }, hoursGridIncrement: { type: [String, Number], default: 1 }, minutesGridIncrement: { type: [String, Number], default: 5 }, secondsGridIncrement: { type: [String, Number], default: 5 }, hoursIncrement: { type: [Number, String], default: 1 }, minutesIncrement: { type: [Number, String], default: 1 }, secondsIncrement: { type: [Number, String], default: 1 } };
var Gn = De(J({}, jn), { fixedStart: { type: Boolean, default: false }, fixedEnd: { type: Boolean, default: false }, timePicker: { type: Boolean, default: false } });
var zn = { name: { type: String, default: null }, placeholder: { type: String, default: "" }, hideInputIcon: { type: Boolean, default: false }, clearable: { type: Boolean, default: true }, state: { type: Boolean, default: null }, required: { type: Boolean, default: false }, autocomplete: { type: String, default: "off" }, inputClassName: { type: String, default: null }, inlineWithInput: { type: Boolean, default: false }, textInputOptions: { type: Object, default: () => null }, openMenuOnFocus: { type: Boolean, default: true } };
var Xn = { minTime: { type: Object, default: null }, maxTime: { type: Object, default: null } };
var un = { minDate: { type: [Date, String], default: null }, maxDate: { type: [Date, String], default: null } };
var qn = J({ selectText: { type: String, default: "Select" }, cancelText: { type: String, default: "Cancel" }, previewFormat: { type: [String, Function], default: () => "" }, multiDates: { type: Boolean, default: false } }, Xn);
var dn = { monthPicker: { type: Boolean, default: false }, customProps: { type: Object, default: null }, yearPicker: { type: Boolean, default: false }, modelAuto: { type: Boolean, default: false } };
var Jn = { locale: { type: String, default: "en-Us" }, weekNumName: { type: String, default: "W" }, weekStart: { type: [Number, String], default: 1 }, weekNumbers: { type: Boolean, default: false }, calendarClassName: { type: String, default: null }, noSwipe: { type: Boolean, default: false }, monthChangeOnScroll: { type: [Boolean, String], default: true }, dayNames: { type: [Function, Array], default: null } };
var Zn = De(J(J(J(J(J(J({}, Gn), qn), dn), un), Jn), sn), { vertical: { type: Boolean, default: false }, disableMonthYearSelect: { type: Boolean, default: false }, menuClassName: { type: String, default: null }, yearRange: { type: Array, default: () => [1900, 2100] }, multiCalendarsSolo: { type: Boolean, default: false }, calendarCellClassName: { type: String, default: null }, enableTimePicker: { type: Boolean, default: true }, autoApply: { type: Boolean, default: false }, disabledDates: { type: [Array, Function], default: () => [] }, monthNameFormat: { type: String, default: "short" }, startDate: { type: [Date, String], default: null }, startTime: { type: [Object, Array], default: null }, monthYearComponent: { type: Object, default: null }, timePickerComponent: { type: Object, default: null }, actionRowComponent: { type: Object, default: null }, hideOffsetDates: { type: Boolean, default: false }, autoRange: { type: [Number, String], default: null }, noToday: { type: Boolean, default: false }, disabledWeekDays: { type: Array, default: () => [] }, allowedDates: { type: Array, default: () => [] }, showNowButton: { type: Boolean, default: false }, nowButtonLabel: { type: String, default: "Now" }, markers: { type: Array, default: () => [] }, modeHeight: { type: [Number, String], default: 255 }, escClose: { type: Boolean, default: true }, spaceConfirm: { type: Boolean, default: true }, monthChangeOnArrows: { type: Boolean, default: true }, presetRanges: { type: Array, default: () => [] }, flow: { type: Array, default: () => [] }, preventMinMaxNavigation: { type: Boolean, default: false }, minRange: { type: [Number, String], default: null }, maxRange: { type: [Number, String], default: null }, multiDatesLimit: { type: [Number, String], default: null }, reverseYears: { type: Boolean, default: false }, keepActionRow: { type: Boolean, default: false }, weekPicker: { type: Boolean, default: false }, filters: { type: Object, default: () => ({}) }, arrowNavigation: { type: Boolean, default: false }, multiStatic: { type: Boolean, default: true }, disableTimeRangeValidation: { type: Boolean, default: false } });
var Hl = De(J(J(J({}, zn), on), Zn), { multiCalendars: { type: [Boolean, Number, String], default: null }, modelValue: { type: [String, Date, Array, Object, Number], default: null }, modelType: { type: String, default: null }, position: { type: String, default: "center" }, dark: { type: Boolean, default: false }, format: { type: [String, Function], default: () => null }, closeOnScroll: { type: Boolean, default: false }, autoPosition: { type: Boolean, default: true }, closeOnAutoApply: { type: Boolean, default: true }, teleport: { type: [String, Object], default: "body" }, altPosition: { type: [Boolean, Function], default: false }, partialRange: { type: Boolean, default: true }, transitions: { type: [Boolean, Object], default: true }, formatLocale: { type: Object, default: null }, utc: { type: Boolean, default: false }, ariaLabels: { type: Object, default: () => ({}) } });
var Qn = { range: { type: Boolean, default: false }, multiCalendars: { type: Number, default: 0 }, internalModelValue: { type: [Date, Array], default: null } };
var xn = De(J(J({}, dn), Qn), { vertical: { type: Boolean, default: false }, month: { type: Number, default: 0 }, year: { type: Number, default: 0 }, instance: { type: Number, default: 1 } });
var Kt = reactive({ menuFocused: false, shiftKeyInMenu: false });
var cn = () => ({ setMenuFocused: (e) => {
  Kt.menuFocused = e;
}, getStore: () => Kt, setShiftKey: (e) => {
  Kt.shiftKeyInMenu !== e && (Kt.shiftKeyInMenu = e);
} });
var Wl = ["aria-label", "aria-disabled", "aria-readonly"];
var Ul = { key: 1, class: "dp__input_wrap" };
var jl = ["id", "name", "placeholder", "disabled", "readonly", "required", "value", "autocomplete", "onKeydown"];
var Gl = { key: 4, class: "dp__clear_icon" };
var zl = defineComponent({ __name: "DatepickerInput", props: De(J(J(J({}, zn), on), sn), { inputValue: { type: String, default: "" }, inline: { type: Boolean, default: false }, isMenuOpen: { type: Boolean, default: false }, pattern: { type: String, default: "" } }), emits: ["clear", "open", "update:inputValue", "setInputDate", "close", "selectDate", "setEmptyDate", "toggle", "focus-prev"], setup(e, { expose: a, emit: n }) {
  const t = e, i = ref(), m = ref(null), v = ref(false), p = inject(Xe), y = useSlots(), { getStore: _ } = cn(), E = computed(() => ({ dp__pointer: !t.disabled && !t.readonly && !t.textInput, dp__disabled: t.disabled, dp__input_readonly: !t.textInput, dp__input: true, dp__input_icon_pad: !t.hideInputIcon, dp__input_valid: t.state, dp__input_invalid: t.state === false, dp__input_focus: v.value || t.isMenuOpen, dp__input_reg: !t.textInput, [t.inputClassName]: !!t.inputClassName })), w = (h) => {
    const { value: N } = h.target, { format: j, rangeSeparator: ne } = t.textInputOptions;
    if (N !== "") {
      if (t.range) {
        const [Z, X] = N.split(`${ne}`);
        if (Z && X) {
          const Q = Qt(Z.trim(), j || t.pattern), M = Qt(X.trim(), j || t.pattern);
          i.value = Q && M ? [Q, M] : null;
        }
      } else
        i.value = Qt(N, j || t.pattern);
      n("setInputDate", i.value);
    } else
      n("setInputDate", null), t.autoApply && (n("setEmptyDate"), i.value = null);
    n("update:inputValue", N);
  }, V = () => {
    var h, N;
    ((h = t.textInputOptions) == null ? void 0 : h.enterSubmit) && xt(i.value) && t.inputValue !== "" ? (n("setInputDate", i.value, true), i.value = null) : ((N = t.textInputOptions) == null ? void 0 : N.enterSubmit) && t.inputValue === "" && (i.value = null, n("clear"));
  }, Y = () => {
    var h, N;
    ((h = t.textInputOptions) == null ? void 0 : h.tabSubmit) && xt(i.value) && t.inputValue !== "" ? (n("setInputDate", i.value, true), i.value = null) : ((N = t.textInputOptions) == null ? void 0 : N.tabSubmit) && t.inputValue === "" && (i.value = null, n("clear")), n("close");
  }, F = () => {
    var h;
    if (_().shiftKeyInMenu && t.openMenuOnFocus)
      return n("close"), n("focus-prev");
    !t.inline && (t.textInput ? t.textInput && ((h = t.textInputOptions) == null ? void 0 : h.openMenu) : true) && (v.value = true, t.openMenuOnFocus && !t.isMenuOpen ? n("open") : t.isMenuOpen && !_().menuFocused && (P(), n("close")));
  }, H = () => {
    var h;
    !t.openMenuOnFocus || y["dp-input"] || y.trigger ? t.textInput && ((h = t.textInputOptions) == null ? void 0 : h.openMenu) && !t.isMenuOpen ? n("open") : t.textInput || n("toggle") : t.textInput || v.value && n("toggle");
  }, z = () => {
    v.value = false, t.autoApply && t.textInput && i.value && (n("setInputDate", i.value), n("selectDate"), i.value = null);
  }, r = () => {
    n("clear");
  }, P = () => {
    v.value = false;
    const h = he(m);
    h && h.blur();
  }, C = (h) => {
    t.textInput || h.preventDefault();
  };
  return a({ unFocus: P }), (h, N) => (openBlock(), createElementBlock("div", { onClick: H, "aria-label": unref(p).input, role: "textbox", "aria-multiline": "false", "aria-disabled": h.disabled, "aria-readonly": h.readonly }, [h.$slots.trigger && !h.$slots["dp-input"] && !e.inline ? renderSlot(h.$slots, "trigger", { key: 0 }) : createCommentVNode("", true), !h.$slots.trigger && (!e.inline || h.inlineWithInput) ? (openBlock(), createElementBlock("div", Ul, [h.$slots["dp-input"] && !h.$slots.trigger && !e.inline ? renderSlot(h.$slots, "dp-input", { key: 0, value: e.inputValue, onInput: w, onEnter: V, onTab: Y, onClear: r }) : createCommentVNode("", true), h.$slots["dp-input"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("input", { key: 1, ref_key: "inputRef", ref: m, id: h.uid ? `dp-input-${h.uid}` : void 0, name: h.name, class: normalizeClass(unref(E)), placeholder: h.placeholder, disabled: h.disabled, readonly: h.readonly, required: h.required, value: e.inputValue, autocomplete: h.autocomplete, onInput: w, onKeydown: [withKeys(V, ["enter"]), withKeys(Y, ["tab"])], onBlur: z, onFocus: F, onKeypress: C }, null, 42, jl)), h.$slots["input-icon"] && !h.hideInputIcon ? (openBlock(), createElementBlock("span", { key: 2, class: "dp__input_icon", onClick: N[0] || (N[0] = (j) => n("toggle")) }, [renderSlot(h.$slots, "input-icon")])) : createCommentVNode("", true), !h.$slots["input-icon"] && !h.hideInputIcon && !h.$slots["dp-input"] ? (openBlock(), createBlock(unref(Yt), { key: 3, class: "dp__input_icon dp__input_icons", onClick: N[1] || (N[1] = (j) => n("toggle")) })) : createCommentVNode("", true), h.$slots["clear-icon"] && e.inputValue && h.clearable && !h.disabled && !h.readonly ? (openBlock(), createElementBlock("span", Gl, [renderSlot(h.$slots, "clear-icon", { clear: r })])) : createCommentVNode("", true), h.clearable && !h.$slots["clear-icon"] && e.inputValue && !h.disabled && !h.readonly ? (openBlock(), createBlock(unref(Qa), { key: 5, class: "dp__clear_icon dp__input_icons", onClick: withModifiers(r, ["stop", "prevent"]) }, null, 8, ["onClick"])) : createCommentVNode("", true)])) : createCommentVNode("", true)], 8, Wl));
} });
var de = reactive({ monthYear: [], calendar: [], time: [], actionRow: [], selectionGrid: [], timePicker: { "0": [], "1": [] }, monthPicker: [] });
var mn = ref(null);
var Ht = ref(false);
var pn = ref(false);
var vn = ref(false);
var fn = ref(false);
var $e = ref(0);
var we = ref(0);
var Je = () => {
  const e = computed(() => Ht.value ? [...de.selectionGrid, de.actionRow].filter((w) => w.length) : pn.value ? [...de.timePicker[0], ...de.timePicker[1], fn.value ? [] : [mn.value], de.actionRow].filter((w) => w.length) : vn.value ? [...de.monthPicker, de.actionRow] : [de.monthYear, ...de.calendar, de.time, de.actionRow].filter((w) => w.length)), a = (w) => {
    $e.value = w ? $e.value + 1 : $e.value - 1;
    let V = null;
    e.value[we.value] && (V = e.value[we.value][$e.value]), V || ($e.value = w ? $e.value - 1 : $e.value + 1);
  }, n = (w) => {
    we.value === 0 && !w || we.value === e.value.length && w || (we.value = w ? we.value + 1 : we.value - 1, e.value[we.value] ? e.value[we.value] && !e.value[we.value][$e.value] && $e.value !== 0 && ($e.value = e.value[we.value].length - 1) : we.value = w ? we.value - 1 : we.value + 1);
  }, t = (w) => {
    let V = null;
    e.value[we.value] && (V = e.value[we.value][$e.value]), V ? V.focus({ preventScroll: !Ht.value }) : $e.value = w ? $e.value - 1 : $e.value + 1;
  }, i = () => {
    a(true), t(true);
  }, m = () => {
    a(false), t(false);
  }, v = () => {
    n(false), t(true);
  }, p = () => {
    n(true), t(true);
  }, y = (w, V) => {
    de[V] = w;
  }, _ = (w, V) => {
    de[V] = w;
  }, E = () => {
    $e.value = 0, we.value = 0;
  };
  return { buildMatrix: y, buildMultiLevelMatrix: _, setTimePickerBackRef: (w) => {
    mn.value = w;
  }, setSelectionGrid: (w) => {
    Ht.value = w, E(), w || (de.selectionGrid = []);
  }, setTimePicker: (w, V = false) => {
    pn.value = w, fn.value = V, E(), w || (de.timePicker[0] = [], de.timePicker[1] = []);
  }, setTimePickerElements: (w, V = 0) => {
    de.timePicker[V] = w;
  }, arrowRight: i, arrowLeft: m, arrowUp: v, arrowDown: p, clearArrowNav: () => {
    de.monthYear = [], de.calendar = [], de.time = [], de.actionRow = [], de.selectionGrid = [], de.timePicker[0] = [], de.timePicker[1] = [], Ht.value = false, pn.value = false, fn.value = false, vn.value = false, E(), mn.value = null;
  }, setMonthPicker: (w) => {
    vn.value = w, E();
  } };
};
var Xl = ["aria-label"];
var ql = { class: "dp__calendar_header", role: "row" };
var Jl = { key: 0, class: "dp__calendar_header_item", role: "gridcell" };
var Zl = createBaseVNode("div", { class: "dp__calendar_header_separator" }, null, -1);
var Ql = ["aria-label"];
var xl = { key: 0, role: "gridcell", class: "dp__calendar_item dp__week_num" };
var er = { class: "dp__cell_inner" };
var tr = ["aria-selected", "aria-disabled", "onClick", "onKeydown", "onMouseover"];
var nr = createBaseVNode("div", { class: "dp__arrow_bottom_tp" }, null, -1);
var ar = defineComponent({ __name: "Calendar", props: De(J(J({}, xn), Jn), { mappedDates: { type: Array, default: () => [] }, getWeekNum: { type: Function, default: () => "" }, modeHeight: { type: [Number, String], default: 255 }, specificMode: { type: Boolean, default: false } }), emits: ["selectDate", "setHoverDate", "handleScroll", "mount", "handleSwipe"], setup(e, { expose: a, emit: n }) {
  const t = e, i = ref(null), m = ref({ bottom: "", left: "", transform: "" }), v = ref([]), p = ref(null), y = ref(true), _ = inject(Lt), E = inject(Xe), w = inject(qe), V = ref(""), Y = ref({ startX: 0, endX: 0, startY: 0, endY: 0 }), F = computed(() => t.dayNames ? Array.isArray(t.dayNames) ? t.dayNames : t.dayNames(t.locale, +t.weekStart) : Vl(t.locale, +t.weekStart)), { buildMultiLevelMatrix: H } = Je();
  onMounted(() => {
    n("mount", { cmp: "calendar", refs: v }), t.noSwipe || p.value && (p.value.addEventListener("touchstart", Z, { passive: false }), p.value.addEventListener("touchend", X, { passive: false }), p.value.addEventListener("touchmove", Q, { passive: false })), t.monthChangeOnScroll && p.value && p.value.addEventListener("wheel", b, { passive: false });
  });
  const z = (u, $) => {
    if (_ != null && _.value) {
      const L = Le(ot(new Date(), t.month, t.year));
      V.value = Te(Le(ot(new Date(), u, $)), L) ? _.value[t.vertical ? "vNext" : "next"] : _.value[t.vertical ? "vPrevious" : "previous"], y.value = false, nextTick(() => {
        y.value = true;
      });
    }
  }, r = computed(() => ({ dp__calendar_wrap: true, [t.calendarClassName]: !!t.calendarClassName })), P = computed(() => (u) => {
    const $ = Ll(u);
    return { dp__marker_dot: $.type === "dot", dp__marker_line: $.type === "line" };
  }), C = computed(() => (u) => ie(u, i.value)), h = computed(() => ({ dp__calendar: true, dp__calendar_next: t.multiCalendars > 0 && t.instance !== 0 })), N = computed(() => t.specificMode ? { height: `${t.modeHeight}px` } : null), j = (u, $, L) => {
    var ae, I;
    if (n("setHoverDate", u), (I = (ae = u.marker) == null ? void 0 : ae.tooltip) != null && I.length) {
      const se = he(v.value[$][L]);
      if (se) {
        const { width: f, height: T } = se.getBoundingClientRect();
        m.value = { bottom: `${T}px`, left: `${f / 2}px`, transform: "translateX(-50%)" }, i.value = u.value;
      }
    }
  }, ne = () => {
    i.value = null;
  }, Z = (u) => {
    Y.value.startX = u.changedTouches[0].screenX, Y.value.startY = u.changedTouches[0].screenY;
  }, X = (u) => {
    Y.value.endX = u.changedTouches[0].screenX, Y.value.endY = u.changedTouches[0].screenY, M();
  }, Q = (u) => {
    u.preventDefault();
  }, M = () => {
    const u = t.vertical ? "Y" : "X";
    Math.abs(Y.value[`start${u}`] - Y.value[`end${u}`]) > 10 && n("handleSwipe", Y.value[`start${u}`] > Y.value[`end${u}`] ? "right" : "left");
  }, o = (u, $, L) => {
    u && (Array.isArray(v.value[$]) ? v.value[$][L] = u : v.value[$] = [u]), w != null && w.value && H(v.value, "calendar");
  }, b = (u) => {
    t.monthChangeOnScroll && (u.preventDefault(), n("handleScroll", u));
  };
  return a({ triggerTransition: z }), (u, $) => (openBlock(), createElementBlock("div", { class: normalizeClass(unref(h)) }, [createBaseVNode("div", { style: normalizeStyle(unref(N)) }, [e.specificMode ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 0, ref_key: "calendarWrapRef", ref: p, class: normalizeClass(unref(r)), role: "grid", "aria-label": unref(E).calendarWrap }, [createBaseVNode("div", ql, [u.weekNumbers ? (openBlock(), createElementBlock("div", Jl, toDisplayString(u.weekNumName), 1)) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(F), (L, ae) => (openBlock(), createElementBlock("div", { class: "dp__calendar_header_item", role: "gridcell", key: ae }, [u.$slots["calendar-header"] ? renderSlot(u.$slots, "calendar-header", { key: 0, day: L, index: ae }) : createCommentVNode("", true), u.$slots["calendar-header"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(L), 1)], 64))]))), 128))]), Zl, createVNode(Transition, { name: V.value, css: !!unref(_) }, { default: withCtx(() => [y.value ? (openBlock(), createElementBlock("div", { key: 0, class: "dp__calendar", role: "grid", "aria-label": unref(E).calendarDays }, [(openBlock(true), createElementBlock(Fragment, null, renderList(e.mappedDates, (L, ae) => (openBlock(), createElementBlock("div", { class: "dp__calendar_row", role: "row", key: ae }, [u.weekNumbers ? (openBlock(), createElementBlock("div", xl, [createBaseVNode("div", er, toDisplayString(e.getWeekNum(L.days)), 1)])) : createCommentVNode("", true), (openBlock(true), createElementBlock(Fragment, null, renderList(L.days, (I, se) => (openBlock(), createElementBlock("div", { role: "gridcell", class: "dp__calendar_item", ref_for: true, ref: (f) => o(f, ae, se), key: se + ae, "aria-selected": I.classData.dp__active_date || I.classData.dp__range_start || I.classData.dp__range_start, "aria-disabled": I.classData.dp__cell_disabled, tabindex: "0", onClick: withModifiers((f) => u.$emit("selectDate", I), ["stop", "prevent"]), onKeydown: withKeys((f) => u.$emit("selectDate", I), ["enter"]), onMouseover: (f) => j(I, ae, se), onMouseleave: ne }, [createBaseVNode("div", { class: normalizeClass(["dp__cell_inner", I.classData]) }, [u.$slots.day ? renderSlot(u.$slots, "day", { key: 0, day: +I.text, date: I.value }) : createCommentVNode("", true), u.$slots.day ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(I.text), 1)], 64)), I.marker ? (openBlock(), createElementBlock("div", { key: 2, class: normalizeClass(unref(P)(I.marker)), style: normalizeStyle(I.marker.color ? { backgroundColor: I.marker.color } : {}) }, null, 6)) : createCommentVNode("", true), unref(C)(I.value) ? (openBlock(), createElementBlock("div", { key: 3, class: "dp__marker_tooltip", style: normalizeStyle(m.value) }, [createBaseVNode("div", { class: "dp__tooltip_content", onClick: $[0] || ($[0] = withModifiers(() => {
  }, ["stop"])) }, [(openBlock(true), createElementBlock(Fragment, null, renderList(I.marker.tooltip, (f, T) => (openBlock(), createElementBlock("div", { key: T, class: "dp__tooltip_text" }, [u.$slots["marker-tooltip"] ? renderSlot(u.$slots, "marker-tooltip", { key: 0, tooltop: f, day: I.value }) : createCommentVNode("", true), u.$slots["marker-tooltip"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createBaseVNode("div", { class: "dp__tooltip_mark", style: normalizeStyle(f.color ? { backgroundColor: f.color } : {}) }, null, 4), createBaseVNode("div", null, toDisplayString(f.text), 1)], 64))]))), 128)), nr])], 4)) : createCommentVNode("", true)], 2)], 40, tr))), 128))]))), 128))], 8, Ql)) : createCommentVNode("", true)]), _: 3 }, 8, ["name", "css"])], 10, Xl))], 4)], 2));
} });
var lr = (e) => typeof e == "object";
var ea = (e, a) => a;
var rr = (e) => Array.isArray(e) && e.length === 2;
var or = (e) => Array.isArray(e);
var sr = (e) => typeof e == "object";
var St = (e) => Array.isArray(e);
var Ye = (e) => Array.isArray(e);
var Wt = (e) => Array.isArray(e) && e.length === 2;
var ur = (e, a) => a ? Array.isArray(e) : Wt(e);
var ir = (e) => Array.isArray(e);
var dr = (e) => typeof e == "string" || typeof e == "object" || typeof e == "number";
var ta = (e) => typeof e == "string";
var cr = { class: "dp__selection_preview" };
var mr = { class: "dp__action_buttons" };
var pr = ["onKeydown"];
var vr = defineComponent({ __name: "ActionRow", props: De(J(J(J(J(J({}, qn), un), Xn), dn), Qn), { inline: { type: Boolean, default: false }, timePicker: { type: Boolean, default: false }, calendarWidth: { type: Number, default: 0 }, menuMount: { type: Boolean, default: false }, enableTimePicker: { type: Boolean, default: true } }), emits: ["closePicker", "selectDate"], setup(e, { emit: a }) {
  const n = e, { buildMatrix: t } = Je(), i = inject(Un), m = inject(qe), v = ref(null), p = ref(null);
  onMounted(() => {
    m != null && m.value && t([he(v), he(p)], "actionRow");
  });
  const y = computed(() => ({ dp__action: true, dp__select: true, dp__action_disabled: !_.value || !E.value })), _ = computed(() => n.enableTimePicker ? ln(n.internalModelValue, n.maxTime, n.minTime) : true), E = computed(() => n.monthPicker ? Cl(n.internalModelValue, n.minDate, n.maxDate) : true), w = (F) => pt(F, n.previewFormat, i == null ? void 0 : i.value), V = computed(() => !n.internalModelValue || !n.menuMount ? "" : typeof n.previewFormat == "string" ? St(n.internalModelValue) ? n.internalModelValue.length === 2 && n.internalModelValue[1] ? n.multiCalendars > 0 ? `${w(n.internalModelValue[0])} - ${w(n.internalModelValue[1])}` : [w(n.internalModelValue[0]), w(n.internalModelValue[1])] : n.multiDates ? n.internalModelValue.map((F) => `${w(F)}`) : n.modelAuto ? `${w(n.internalModelValue[0])}` : `${w(n.internalModelValue[0])} -` : pt(n.internalModelValue, n.previewFormat, i == null ? void 0 : i.value) : n.timePicker ? n.previewFormat(tn(n.internalModelValue)) : n.monthPicker ? n.previewFormat(Ft(n.internalModelValue)) : n.previewFormat(n.internalModelValue)), Y = () => {
    _.value && E.value && a("selectDate");
  };
  return (F, H) => (openBlock(), createElementBlock("div", { class: "dp__action_row", style: normalizeStyle(e.calendarWidth ? { width: `${e.calendarWidth}px` } : {}) }, [createBaseVNode("div", cr, [F.$slots["action-preview"] ? renderSlot(F.$slots, "action-preview", { key: 0, value: F.internalModelValue }) : createCommentVNode("", true), F.$slots["action-preview"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [Array.isArray(unref(V)) ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [createTextVNode(toDisplayString(unref(V)), 1)], 64)), Array.isArray(unref(V)) ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref(V), (z, r) => (openBlock(), createElementBlock("div", { key: r }, toDisplayString(z), 1))), 128)) : createCommentVNode("", true)], 64))]), createBaseVNode("div", mr, [F.$slots["action-select"] ? renderSlot(F.$slots, "action-select", { key: 0, value: F.internalModelValue }) : createCommentVNode("", true), F.$slots["action-select"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [e.inline ? createCommentVNode("", true) : (openBlock(), createElementBlock("span", { key: 0, class: "dp__action dp__cancel", ref_key: "cancelButtonRef", ref: v, tabindex: "0", onClick: H[0] || (H[0] = (z) => F.$emit("closePicker")), onKeydown: H[1] || (H[1] = withKeys((z) => F.$emit("closePicker"), ["enter"])) }, toDisplayString(F.cancelText), 545)), createBaseVNode("span", { class: normalizeClass(unref(y)), tabindex: "0", onKeydown: withKeys(Y, ["enter"]), onClick: Y, ref_key: "selectButtonRef", ref: p }, toDisplayString(F.selectText), 43, pr)], 64))])], 4));
} });
var fr = { class: "dp__selection_grid_header" };
var yr = ["aria-selected", "aria-disabled", "onClick", "onKeydown", "onMouseover"];
var hr = ["aria-label", "onKeydown"];
var At = defineComponent({ __name: "SelectionGrid", props: { items: { type: Array, default: () => [] }, modelValue: { type: [String, Number], default: null }, multiModelValue: { type: Array, default: () => [] }, disabledValues: { type: Array, default: () => [] }, minValue: { type: [Number, String], default: null }, maxValue: { type: [Number, String], default: null }, year: { type: Number, default: 0 }, skipActive: { type: Boolean, default: false }, headerRefs: { type: Array, default: () => [] }, skipButtonRef: { type: Boolean, default: false } }, emits: ["update:modelValue", "selected", "toggle", "reset-flow"], setup(e, { expose: a, emit: n }) {
  const t = e, i = ref(false), m = ref(null), v = ref(null), p = ref([]), y = inject(rn, false), _ = inject(Wn, ref(false)), E = inject(Xe), w = inject(qe), V = ref(), Y = ref(), { setSelectionGrid: F, buildMultiLevelMatrix: H, setMonthPicker: z } = Je();
  onBeforeUpdate(() => {
    m.value = null;
  }), onMounted(() => {
    nextTick().then(() => X()), P(), r(true);
  }), onUnmounted(() => r(false));
  const r = (u) => {
    var $;
    w != null && w.value && (($ = t.headerRefs) != null && $.length ? z(u) : F(u));
  }, P = () => {
    const u = he(v);
    u && (_.value || u.focus({ preventScroll: true }), i.value = u.clientHeight < u.scrollHeight);
  }, C = computed(() => ({ dp__overlay: true })), h = computed(() => ({ dp__overlay_col: true })), N = computed(() => t.items.map((u) => u.filter(($) => $).map(($) => {
    var I, se, f;
    const L = t.disabledValues.some((T) => T === $.value) || Z($.value), ae = (I = t.multiModelValue) != null && I.length ? (se = t.multiModelValue) == null ? void 0 : se.some((T) => ie(T, setYear(setMonth(new Date(), $.value), t.year))) : t.skipActive ? false : $.value === t.modelValue;
    return De(J({}, $), { className: { dp__overlay_cell_active: ae, dp__overlay_cell: !ae, dp__overlay_cell_disabled: L, dp__overlay_cell_active_disabled: L && ae, dp__overlay_cell_pad: true, dp__cell_in_between: (f = t.multiModelValue) != null && f.length ? M($.value) : false } });
  }))), j = computed(() => ({ dp__button: true, dp__overlay_action: true, dp__over_action_scroll: i.value, dp__button_bottom: y })), ne = computed(() => {
    var u, $;
    return { dp__overlay_container: true, dp__container_flex: ((u = t.items) == null ? void 0 : u.length) <= 6, dp__container_block: (($ = t.items) == null ? void 0 : $.length) > 6 };
  }), Z = (u) => {
    const $ = t.maxValue || t.maxValue === 0, L = t.minValue || t.minValue === 0;
    return !$ && !L ? false : $ && L ? +u > +t.maxValue || +u < +t.minValue : $ ? +u > +t.maxValue : L ? +u < +t.minValue : false;
  }, X = () => {
    const u = he(m);
    if (u) {
      const $ = he(v);
      $ && ($.scrollTop = u.offsetTop - $.offsetTop - ($.getBoundingClientRect().height / 2 - u.getBoundingClientRect().height));
    }
  }, Q = (u) => {
    !t.disabledValues.some(($) => $ === u) && !Z(u) && (n("update:modelValue", u), n("selected"));
  }, M = (u) => En(t.multiModelValue, setYear(setMonth(new Date(), V.value || 0), t.year), setYear(setMonth(new Date(), u), t.year)), o = () => {
    n("toggle"), n("reset-flow");
  }, b = (u, $, L, ae) => {
    var I, se;
    if (u && ($.value === +t.modelValue && !t.disabledValues.includes($.value) && (m.value = u), w != null && w.value)) {
      Array.isArray(p.value[L]) ? p.value[L][ae] = u : p.value[L] = [u];
      const f = (I = t.headerRefs) != null && I.length ? [t.headerRefs].concat(p.value) : p.value.concat([t.skipButtonRef ? [] : [Y.value]]);
      H(f, (se = t.headerRefs) != null && se.length ? "monthPicker" : "selectionGrid");
    }
  };
  return a({ focusGrid: P }), (u, $) => (openBlock(), createElementBlock("div", { ref_key: "gridWrapRef", ref: v, class: normalizeClass(unref(C)), role: "dialog", tabindex: "0" }, [createBaseVNode("div", { class: normalizeClass(unref(ne)), role: "grid" }, [createBaseVNode("div", fr, [renderSlot(u.$slots, "header")]), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(N), (L, ae) => (openBlock(), createElementBlock("div", { class: "dp__overlay_row", key: unref(El)(ae), role: "row" }, [(openBlock(true), createElementBlock(Fragment, null, renderList(L, (I, se) => (openBlock(), createElementBlock("div", { role: "gridcell", class: normalizeClass(unref(h)), key: I.value, "aria-selected": I.value === e.modelValue && !e.disabledValues.includes(I.value), "aria-disabled": I.className.dp__overlay_cell_disabled, ref_for: true, ref: (f) => b(f, I, ae, se), tabindex: "0", onClick: (f) => Q(I.value), onKeydown: withKeys((f) => Q(I.value), ["enter"]), onMouseover: (f) => V.value = I.value }, [createBaseVNode("div", { class: normalizeClass(I.className) }, [u.$slots.item ? renderSlot(u.$slots, "item", { key: 0, item: I }) : createCommentVNode("", true), u.$slots.item ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(I.text), 1)], 64))], 2)], 42, yr))), 128))]))), 128)), u.$slots["button-icon"] ? (openBlock(), createElementBlock("div", { key: 0, role: "button", "aria-label": unref(E).toggleOverlay, class: normalizeClass(unref(j)), tabindex: "0", ref_key: "toggleButton", ref: Y, onClick: o, onKeydown: withKeys(o, ["enter"]) }, [renderSlot(u.$slots, "button-icon")], 42, hr)) : createCommentVNode("", true)], 2)], 2));
} });
var Ut = () => {
  const e = inject(Lt);
  return { transitionName: computed(() => (a) => e != null && e.value ? a ? e.value.open : e.value.close : ""), showTransition: !!(e != null && e.value) };
};
var gr = { key: 0, class: "dp__time_input" };
var wr = createTextVNode(" : ");
var kr = ["aria-label", "onKeydown", "onClick"];
var br = ["aria-label", "onKeydown", "onClick"];
var $r = ["aria-label", "onKeydown", "onClick"];
var Dr = { key: 0 };
var Mr = ["aria-label", "onKeydown"];
var Sr = defineComponent({ __name: "TimeInput", props: De(J({}, jn), { hours: { type: Number, default: 0 }, minutes: { type: Number, default: 0 }, seconds: { type: Number, default: 0 }, filters: { type: Object, default: () => ({}) }, disabled: { type: Boolean, default: false }, closeTimePickerBtn: { type: Object, default: null }, order: { type: Number, default: 0 } }), emits: ["setHours", "setMinutes", "update:hours", "update:minutes", "update:seconds", "reset-flow", "mounted", "overlay-closed"], setup(e, { expose: a, emit: n }) {
  const t = e, i = reactive({ hours: false, minutes: false, seconds: false }), m = ref("AM"), v = ref(null), p = inject(Xe), y = inject(qe), _ = ref([]), { transitionName: E, showTransition: w } = Ut(), { setTimePickerElements: V, setTimePickerBackRef: Y } = Je();
  onMounted(() => {
    n("mounted");
  });
  const F = computed(() => ({ dp__time_col: true, dp__time_col_reg: !t.enableSeconds && t.is24, dp__time_col_reg_with_button: !t.enableSeconds && !t.is24, dp__time_col_sec: t.enableSeconds && t.is24, dp__time_col_sec_with_button: t.enableSeconds && !t.is24 })), H = computed(() => {
    const M = [{ type: "hours" }, "separator", { type: "minutes" }];
    return t.enableSeconds ? M.concat(["separator", { type: "seconds" }]) : M;
  }), z = computed(() => H.value.filter((M) => typeof M != "string")), r = computed(() => (M) => {
    if (M === "hours") {
      const o = j(t.hours);
      return { text: o < 10 ? `0${o}` : `${o}`, value: o };
    }
    return { text: t[M] < 10 ? `0${t[M]}` : `${t[M]}`, value: t[M] };
  }), P = (M) => {
    const o = M === "hours" ? t.is24 ? 24 : 12 : 60, b = +t[`${M}GridIncrement`], u = [];
    for (let $ = 0; $ < o; $ += b)
      u.push({ value: $, text: $ < 10 ? `0${$}` : `${$}` });
    return Ol(u);
  }, C = (M) => t[`no${M[0].toUpperCase() + M.slice(1)}Overlay`], h = (M) => {
    C(M) || (i[M] = !i[M], i[M] || n("overlay-closed"));
  }, N = (M, o = true) => {
    const b = M === "hours" ? getHours : M === "minutes" ? getMinutes : getSeconds, u = o ? Al : Pl;
    n(`update:${M}`, b(u({ [M]: +t[M] }, { [M]: +t[`${M}Increment`] })));
  }, j = (M) => t.is24 ? M : (M >= 12 ? m.value = "PM" : m.value = "AM", Il(M)), ne = () => {
    m.value === "PM" ? (m.value = "AM", n("update:hours", t.hours - 12)) : (m.value = "PM", n("update:hours", t.hours + 12));
  }, Z = (M) => {
    i[M] = true;
  }, X = (M, o, b) => {
    if (M && (y == null ? void 0 : y.value)) {
      Array.isArray(_.value[o]) ? _.value[o][b] = M : _.value[o] = [M];
      const u = _.value.reduce(($, L) => L.map((ae, I) => [...$[I] || [], L[I]]), []);
      Y(t.closeTimePickerBtn), v.value && (u[1] = u[1].concat(v.value)), V(u, t.order);
    }
  }, Q = (M, o) => M === "hours" && !t.is24 ? n(`update:${M}`, m.value === "PM" ? o + 12 : o) : n(`update:${M}`, o);
  return a({ openChildCmp: Z }), (M, o) => e.disabled ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", gr, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(H), (b, u) => (openBlock(), createElementBlock("div", { key: u, class: normalizeClass(unref(F)) }, [b === "separator" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [wr], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createBaseVNode("div", { class: "dp__inc_dec_button", role: "button", "aria-label": unref(p).incrementValue(b.type), tabindex: "0", onKeydown: withKeys(($) => N(b.type), ["enter"]), onClick: ($) => N(b.type), ref_for: true, ref: ($) => X($, u, 0) }, [M.$slots["arrow-up"] ? renderSlot(M.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true), M.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Vn), { key: 1 }))], 40, kr), createBaseVNode("div", { role: "button", "aria-label": unref(p).openTpOverlay(b.type), class: normalizeClass(C(b.type) ? "" : "dp__time_display"), tabindex: "0", onKeydown: withKeys(($) => h(b.type), ["enter"]), onClick: ($) => h(b.type), ref_for: true, ref: ($) => X($, u, 1) }, [M.$slots[b.type] ? renderSlot(M.$slots, b.type, { key: 0, text: unref(r)(b.type).text, value: unref(r)(b.type).value }) : createCommentVNode("", true), M.$slots[b.type] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(unref(r)(b.type).text), 1)], 64))], 42, br), createBaseVNode("div", { class: "dp__inc_dec_button", role: "button", "aria-label": unref(p).decrementValue(b.type), tabindex: "0", onKeydown: withKeys(($) => N(b.type, false), ["enter"]), onClick: ($) => N(b.type, false), ref_for: true, ref: ($) => X($, u, 2) }, [M.$slots["arrow-down"] ? renderSlot(M.$slots, "arrow-down", { key: 0 }) : createCommentVNode("", true), M.$slots["arrow-down"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Bn), { key: 1 }))], 40, $r)], 64))], 2))), 128)), M.is24 ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", Dr, [M.$slots["am-pm-button"] ? renderSlot(M.$slots, "am-pm-button", { key: 0, toggle: ne, value: m.value }) : createCommentVNode("", true), M.$slots["am-pm-button"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("button", { key: 1, ref_key: "amPmButton", ref: v, type: "button", class: "dp__pm_am_button", role: "button", "aria-label": unref(p).amPmButton, tabindex: "0", onClick: ne, onKeydown: withKeys(withModifiers(ne, ["prevent"]), ["enter"]) }, toDisplayString(m.value), 41, Mr))])), (openBlock(true), createElementBlock(Fragment, null, renderList(unref(z), (b, u) => (openBlock(), createBlock(Transition, { key: u, name: unref(E)(i[b.type]), css: unref(w) }, { default: withCtx(() => [i[b.type] ? (openBlock(), createBlock(At, { key: 0, items: P(b.type), "disabled-values": e.filters.times[b.type], "onUpdate:modelValue": ($) => Q(b.type, $), onSelected: ($) => h(b.type), onToggle: ($) => h(b.type), onResetFlow: o[0] || (o[0] = ($) => M.$emit("reset-flow")) }, createSlots({ "button-icon": withCtx(() => [M.$slots["clock-icon"] ? renderSlot(M.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true), M.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(On), { key: 1 }))]), _: 2 }, [M.$slots[`${b.type}-overlay`] ? { name: "item", fn: withCtx(({ item: $ }) => [renderSlot(M.$slots, `${b.type}-overlay`, { text: $.text, value: $.value })]) } : void 0]), 1032, ["items", "disabled-values", "onUpdate:modelValue", "onSelected", "onToggle"])) : createCommentVNode("", true)]), _: 2 }, 1032, ["name", "css"]))), 128))]));
} });
var Pt = [{ name: "clock-icon", use: ["time", "calendar"] }, { name: "arrow-left", use: ["month-year", "calendar"] }, { name: "arrow-right", use: ["month-year", "calendar"] }, { name: "arrow-up", use: ["time", "calendar"] }, { name: "arrow-down", use: ["time", "calendar"] }, { name: "calendar-icon", use: ["month-year", "time", "calendar"] }, { name: "day", use: ["calendar"] }, { name: "month-overlay", use: ["calendar", "month-year"] }, { name: "year-overlay", use: ["calendar", "month-year"] }, { name: "hours-overlay", use: ["calendar", "time"] }, { name: "minutes-overlay", use: ["calendar", "time"] }, { name: "seconds-overlay", use: ["calendar", "time"] }, { name: "hours", use: ["calendar", "time"] }, { name: "minutes", use: ["calendar", "time"] }, { name: "month", use: ["calendar", "month-year"] }, { name: "year", use: ["calendar", "month-year"] }, { name: "action-select", use: ["action"] }, { name: "action-preview", use: ["action"] }, { name: "calendar-header", use: ["calendar"] }, { name: "marker-tooltip", use: ["calendar"] }, { name: "now-button", use: [] }, { name: "time-picker-overlay", use: ["calendar", "time"] }, { name: "am-pm-button", use: ["calendar", "time"] }];
var Ar = [{ name: "trigger" }, { name: "input-icon" }, { name: "clear-icon" }, { name: "dp-input" }];
var Pr = { all: () => Pt, monthYear: () => Pt.filter((e) => e.use.includes("month-year")), input: () => Ar, timePicker: () => Pt.filter((e) => e.use.includes("time")), action: () => Pt.filter((e) => e.use.includes("action")), calendar: () => Pt.filter((e) => e.use.includes("calendar")) };
var st = (e, a) => {
  const n = [];
  return Pr[a]().forEach((t) => {
    e[t.name] && n.push(t.name);
  }), n;
};
var Cr = ["aria-label"];
var Tr = { class: "dp__overlay_container dp__container_flex" };
var _r = { key: 1, class: "dp__overlay_row" };
var Rr = ["aria-label"];
var Or = defineComponent({ __name: "TimePicker", props: De(J({}, Gn), { range: { type: Boolean, default: false }, filters: { type: Object, default: () => ({}) }, hours: { type: [Number, Array], default: 0 }, minutes: { type: [Number, Array], default: 0 }, seconds: { type: [Number, Array], default: 0 }, customProps: { type: Object, default: null }, modelAuto: { type: Boolean, default: false }, internalModelValue: { type: [Date, Array], default: null } }), emits: ["update:hours", "update:minutes", "update:seconds", "mount", "reset-flow", "overlay-closed"], setup(e, { expose: a, emit: n }) {
  const t = e, i = useSlots(), m = ref(null), v = ref(null), p = inject(rn, false), y = ref([]), _ = ref(null), E = inject(Xe), w = inject(qe), { transitionName: V, showTransition: Y } = Ut(), { buildMatrix: F, setTimePicker: H } = Je();
  onMounted(() => {
    n("mount"), !t.timePicker && (w == null ? void 0 : w.value) ? F([he(m.value)], "time") : H(true, t.timePicker);
  });
  const z = computed(() => t.range && t.modelAuto ? Hn(t.internalModelValue) : true), r = ref(false), P = (o) => ({ hours: Array.isArray(t.hours) ? t.hours[o] : t.hours, minutes: Array.isArray(t.minutes) ? t.minutes[o] : t.minutes, seconds: Array.isArray(t.seconds) ? t.seconds[o] : t.seconds }), C = computed(() => {
    const o = [];
    if (t.range)
      for (let b = 0; b < 2; b++)
        o.push(P(b));
    else
      o.push(P(0));
    return o;
  }), h = (o, b = false, u = "") => {
    b || n("reset-flow"), r.value = o, w != null && w.value && (H(o), o || n("overlay-closed")), nextTick(() => {
      u !== "" && y.value[0] && y.value[0].openChildCmp(u);
    });
  }, N = computed(() => ({ dp__button: true, dp__button_bottom: p })), j = st(i, "timePicker"), ne = (o, b, u) => t.range ? b === 0 ? [o, C.value[1][u]] : [C.value[0][u], o] : o, Z = (o) => {
    n("update:hours", o);
  }, X = (o) => {
    n("update:minutes", o);
  }, Q = (o) => {
    n("update:seconds", o);
  }, M = () => {
    _.value && (w == null ? void 0 : w.value) && _.value.focus({ preventScroll: true });
  };
  return a({ toggleTimePicker: h }), (o, b) => (openBlock(), createElementBlock("div", null, [o.timePicker ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 0, class: normalizeClass(unref(N)), role: "button", "aria-label": unref(E).openTimePicker, tabindex: "0", ref_key: "openTimePickerBtn", ref: m, onKeydown: b[0] || (b[0] = withKeys((u) => h(true), ["enter"])), onClick: b[1] || (b[1] = (u) => h(true)) }, [o.$slots["clock-icon"] ? renderSlot(o.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true), o.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(On), { key: 1 }))], 42, Cr)), createVNode(Transition, { name: unref(V)(r.value), css: unref(Y) }, { default: withCtx(() => [r.value || o.timePicker ? (openBlock(), createElementBlock("div", { key: 0, class: "dp__overlay", ref_key: "overlayRef", ref: _, tabindex: "0" }, [createBaseVNode("div", Tr, [o.$slots["time-picker-overlay"] ? renderSlot(o.$slots, "time-picker-overlay", { key: 0, range: e.range, hours: e.hours, minutes: e.minutes, seconds: e.seconds, setHours: Z, setMinutes: X, setSeconds: Q }) : createCommentVNode("", true), o.$slots["time-picker-overlay"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", _r, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(C), (u, $) => withDirectives((openBlock(), createBlock(Sr, mergeProps({ key: $, disabled: $ === 0 ? o.fixedStart : o.fixedEnd, hours: u.hours, minutes: u.minutes, seconds: u.seconds, filters: e.filters, ref_for: true, ref_key: "timeInputRefs", ref: y }, { is24: o.is24, hoursGridIncrement: o.hoursGridIncrement, minutesGridIncrement: o.minutesGridIncrement, secondsGridIncrement: o.secondsGridIncrement, hoursIncrement: o.hoursIncrement, minutesIncrement: o.minutesIncrement, secondsIncrement: o.secondsIncrement, filters: e.filters, noHoursOverlay: o.noHoursOverlay, noMinutesOverlay: o.noMinutesOverlay, noSecondsOverlay: o.noSecondsOverlay, enableSeconds: o.enableSeconds, closeTimePickerBtn: v.value, order: $ }, { "onUpdate:hours": (L) => Z(ne(L, $, "hours")), "onUpdate:minutes": (L) => X(ne(L, $, "minutes")), "onUpdate:seconds": (L) => Q(ne(L, $, "seconds")), onMounted: M, onOverlayClosed: M }), createSlots({ _: 2 }, [renderList(unref(j), (L, ae) => ({ name: L, fn: withCtx((I) => [renderSlot(o.$slots, L, normalizeProps(guardReactiveProps(I)))]) }))]), 1040, ["disabled", "hours", "minutes", "seconds", "filters", "onUpdate:hours", "onUpdate:minutes", "onUpdate:seconds"])), [[vShow, $ === 0 ? true : unref(z)]])), 128))])), o.timePicker ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 2, ref_key: "closeTimePickerBtn", ref: v, class: normalizeClass(unref(N)), role: "button", "aria-label": unref(E).closeTimePicker, tabindex: "0", onKeydown: b[2] || (b[2] = withKeys((u) => h(false), ["enter"])), onClick: b[3] || (b[3] = (u) => h(false)) }, [o.$slots["calendar-icon"] ? renderSlot(o.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true), o.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Yt), { key: 1 }))], 42, Rr))])], 512)) : createCommentVNode("", true)]), _: 3 }, 8, ["name", "css"])]));
} });
var Vr = ["aria-label"];
var yn = defineComponent({ __name: "ActionIcon", props: { ariaLabel: { type: String, default: "" } }, emits: ["activate", "setRef"], setup(e, { emit: a }) {
  const n = ref(null);
  return onMounted(() => a("setRef", n)), (t, i) => (openBlock(), createElementBlock("div", { class: "dp__month_year_col_nav", onClick: i[0] || (i[0] = (m) => t.$emit("activate")), onKeydown: i[1] || (i[1] = withKeys((m) => t.$emit("activate"), ["enter"])), tabindex: "0", ref_key: "elRef", ref: n }, [createBaseVNode("div", { class: "dp__inner_nav", role: "button", "aria-label": e.ariaLabel }, [renderSlot(t.$slots, "default")], 8, Vr)], 544));
} });
var Br = ["aria-label"];
var na = defineComponent({ __name: "RegularPicker", props: { ariaLabel: { type: String, default: "" }, showSelectionGrid: { type: Boolean, default: false }, modelValue: { type: Number, default: null }, items: { type: Array, default: () => [] }, disabledValues: { type: Array, default: () => [] }, minValue: { type: Number, default: null }, maxValue: { type: Number, default: null }, slotName: { type: String, default: "" }, headerRefs: { type: Array, default: () => [] } }, emits: ["update:model-value", "toggle", "setRef"], setup(e, { emit: a }) {
  const { transitionName: n, showTransition: t } = Ut(), i = ref(null);
  return onMounted(() => a("setRef", i)), (m, v) => (openBlock(), createElementBlock(Fragment, null, [createBaseVNode("div", { class: "dp__month_year_select", onClick: v[0] || (v[0] = (p) => m.$emit("toggle")), onKeydown: v[1] || (v[1] = withKeys((p) => m.$emit("toggle"), ["enter"])), role: "button", "aria-label": e.ariaLabel, tabindex: "0", ref_key: "elRef", ref: i }, [renderSlot(m.$slots, "default")], 40, Br), createVNode(Transition, { name: unref(n)(e.showSelectionGrid), css: unref(t) }, { default: withCtx(() => [e.showSelectionGrid ? (openBlock(), createBlock(At, mergeProps({ key: 0 }, { modelValue: e.modelValue, items: e.items, disabledValues: e.disabledValues, minValue: e.minValue, maxValue: e.maxValue }, { "header-refs": [], "onUpdate:modelValue": v[2] || (v[2] = (p) => m.$emit("update:model-value", p)), onToggle: v[3] || (v[3] = (p) => m.$emit("toggle")) }), createSlots({ "button-icon": withCtx(() => [m.$slots["calendar-icon"] ? renderSlot(m.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true), m.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Yt), { key: 1 }))]), _: 2 }, [m.$slots[e.slotName] ? { name: "item", fn: withCtx(({ item: p }) => [renderSlot(m.$slots, e.slotName, { item: p })]) } : void 0]), 1040)) : createCommentVNode("", true)]), _: 3 }, 8, ["name", "css"])], 64));
} });
var jt = (e, a, n) => [set(new Date(e), { date: 1 }), set(new Date(), { month: a, year: n, date: 1 })];
var aa = (e, a, n) => be(...jt(e, a, n)) || ie(...jt(e, a, n));
var la = (e, a, n) => Te(...jt(e, a, n)) || ie(...jt(e, a, n));
var ra = (e, a, n, t, i, m) => {
  let v = false;
  return m ? e && a ? (a && i && la(a, n, t) && (v = true), e && !i && aa(e, n, t) && (v = true)) : (e && aa(e, n, t) || a && la(a, n, t)) && (v = true) : v = true, v;
};
var Nr = (e, a) => {
  const n = (v, p) => {
    let y = v;
    return e.filters.months.includes(getMonth(y)) ? (y = p ? addMonths(v, 1) : subMonths(v, 1), n(y, p)) : y;
  }, t = (v, p) => {
    let y = v;
    return e.filters.years.includes(getYear(y)) ? (y = p ? addYears(v, 1) : subYears(v, 1), t(y, p)) : y;
  }, i = (v) => {
    const p = set(new Date(), { month: e.month, year: e.year });
    let y = v ? addMonths(p, 1) : subMonths(p, 1), _ = getMonth(y), E = getYear(y);
    e.filters.months.includes(_) && (y = n(y, v), _ = getMonth(y), E = getYear(y)), e.filters.years.includes(E) && (y = t(y, v), E = getYear(y)), ra(e.minDate, e.maxDate, _, E, v, e.preventMinMaxNavigation) && m(_, E);
  }, m = (v, p) => {
    a("update-month-year", { month: v, year: p });
  };
  return { handleMonthYearChange: i };
};
var Ir = { class: "dp__month_year_row" };
var Yr = { class: "dp__month_picker_header" };
var Fr = ["aria-label"];
var Er = ["aria-label", "onKeydown"];
var Lr = ["aria-label"];
var Kr = defineComponent({ __name: "MonthYearPicker", props: De(J(J({}, xn), un), { preventMinMaxNavigation: { type: Boolean, default: false }, reverseYears: { type: Boolean, default: false }, years: { type: Array, default: () => [] }, months: { type: Array, default: () => [] }, filters: { type: Object, default: () => ({}) }, multiCalendarsSolo: { type: Boolean, default: false }, yearPicker: { type: Boolean, default: false } }), emits: ["update-month-year", "monthYearSelect", "mount", "reset-flow", "overlay-closed"], setup(e, { expose: a, emit: n }) {
  const t = e, { transitionName: i, showTransition: m } = Ut(), { buildMatrix: v } = Je(), p = ref(false), y = ref(false), _ = ref([null, null, null, null]), E = ref(null), w = ref(null), V = ref(null), Y = inject(Xe), F = inject(qe), { handleMonthYearChange: H } = Nr(t, n);
  onMounted(() => {
    n("mount");
  });
  const z = (f) => ({ get: () => t[f], set: (T) => {
    const B = f === "month" ? "year" : "month";
    n("update-month-year", { [f]: T, [B]: t[B] }), n("monthYearSelect", f === "year"), f === "month" ? $(true) : L(true);
  } }), r = computed(z("month")), P = computed(z("year")), C = computed(() => (f) => {
    const T = f === "month";
    return { showSelectionGrid: (T ? p : y).value, items: (T ? M : o).value, disabledValues: t.filters[T ? "months" : "years"], minValue: (T ? j : h).value, maxValue: (T ? ne : N).value, headerRefs: T && t.monthPicker ? [E.value, w.value, V.value] : [] };
  }), h = computed(() => t.minDate ? getYear(new Date(t.minDate)) : null), N = computed(() => t.maxDate ? getYear(new Date(t.maxDate)) : null), j = computed(() => {
    if (t.minDate && h.value) {
      if (h.value > t.year)
        return 12;
      if (h.value === t.year)
        return getMonth(new Date(t.minDate));
    }
    return null;
  }), ne = computed(() => t.maxDate && N.value ? N.value < t.year ? -1 : N.value === t.year ? getMonth(new Date(t.maxDate)) : null : null), Z = computed(() => t.range && t.internalModelValue && t.monthPicker ? t.internalModelValue : []), X = (f, T = false) => {
    const B = [];
    for (let ke = 0; ke < f.length; ke += 3) {
      const Fe = [f[ke], f[ke + 1], f[ke + 2]];
      B.push(T ? Fe.reverse() : Fe);
    }
    return T ? B.reverse() : B;
  }, Q = computed(() => {
    const f = t.months.find((T) => T.value === t.month);
    return f || { text: "", value: 0 };
  }), M = computed(() => X(t.months)), o = computed(() => X(t.years, t.reverseYears)), b = computed(() => t.multiCalendars ? t.multiCalendarsSolo ? true : t.instance === 0 : true), u = computed(() => t.multiCalendars ? t.multiCalendarsSolo ? true : t.instance === t.multiCalendars - 1 : true), $ = (f = false) => {
    ae(f), p.value = !p.value, p.value || n("overlay-closed");
  }, L = (f = false) => {
    ae(f), y.value = !y.value, y.value || n("overlay-closed");
  }, ae = (f) => {
    f || n("reset-flow");
  }, I = (f = false) => {
    n("update-month-year", { year: f ? t.year + 1 : t.year - 1, month: t.month });
  }, se = (f, T) => {
    F != null && F.value && (_.value[T] = he(f), v(_.value, "monthYear"));
  };
  return a({ toggleMonthPicker: $, toggleYearPicker: L }), (f, T) => (openBlock(), createElementBlock("div", Ir, [!f.monthPicker && !e.yearPicker ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [unref(b) && !f.vertical ? (openBlock(), createBlock(yn, { key: 0, "aria-label": unref(Y).prevMonth, onActivate: T[0] || (T[0] = (B) => unref(H)(false)), onSetRef: T[1] || (T[1] = (B) => se(B, 0)) }, { default: withCtx(() => [f.$slots["arrow-left"] ? renderSlot(f.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true), f.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(_n), { key: 1 }))]), _: 3 }, 8, ["aria-label"])) : createCommentVNode("", true), createVNode(na, mergeProps({ "aria-label": unref(Y).openMonthsOverlay, "slot-name": "month-overlay", modelValue: unref(r), "onUpdate:modelValue": T[2] || (T[2] = (B) => isRef(r) ? r.value = B : null) }, unref(C)("month"), { onToggle: $, onSetRef: T[3] || (T[3] = (B) => se(B, 1)) }), createSlots({ default: withCtx(() => [f.$slots.month ? renderSlot(f.$slots, "month", normalizeProps(mergeProps({ key: 0 }, unref(Q)))) : createCommentVNode("", true), f.$slots.month ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(unref(Q).text), 1)], 64))]), _: 2 }, [f.$slots["calendar-icon"] ? { name: "calendar-icon", fn: withCtx(() => [renderSlot(f.$slots, "calendar-icon")]) } : void 0, f.$slots["month-overlay"] ? { name: "month-overlay", fn: withCtx(({ item: B }) => [renderSlot(f.$slots, "month-overlay", { text: B.text, value: B.value })]) } : void 0]), 1040, ["aria-label", "modelValue"]), createVNode(na, mergeProps({ "aria-label": unref(Y).openYearsOverlay, "slot-name": "year-overlay", modelValue: unref(P), "onUpdate:modelValue": T[4] || (T[4] = (B) => isRef(P) ? P.value = B : null) }, unref(C)("year"), { onToggle: L, onSetRef: T[5] || (T[5] = (B) => se(B, 2)) }), createSlots({ default: withCtx(() => [f.$slots.year ? renderSlot(f.$slots, "year", { key: 0, year: f.year }) : createCommentVNode("", true), f.$slots.year ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(f.year), 1)], 64))]), _: 2 }, [f.$slots["calendar-icon"] ? { name: "calendar-icon", fn: withCtx(() => [renderSlot(f.$slots, "calendar-icon")]) } : void 0, f.$slots["year-overlay"] ? { name: "year-overlay", fn: withCtx(({ item: B }) => [renderSlot(f.$slots, "year-overlay", { text: B.text, value: B.value })]) } : void 0]), 1040, ["aria-label", "modelValue"]), unref(b) && f.vertical ? (openBlock(), createBlock(yn, { key: 1, "aria-label": unref(Y).prevMonth, onActivate: T[6] || (T[6] = (B) => unref(H)(false)) }, { default: withCtx(() => [f.$slots["arrow-up"] ? renderSlot(f.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true), f.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Vn), { key: 1 }))]), _: 3 }, 8, ["aria-label"])) : createCommentVNode("", true), unref(u) ? (openBlock(), createBlock(yn, { key: 2, "arial-label": unref(Y).nextMonth, onActivate: T[7] || (T[7] = (B) => unref(H)(true)), ref: "rightIcon", onSetRef: T[8] || (T[8] = (B) => se(B, 3)) }, { default: withCtx(() => [f.$slots[f.vertical ? "arrow-down" : "arrow-right"] ? renderSlot(f.$slots, f.vertical ? "arrow-down" : "arrow-right", { key: 0 }) : createCommentVNode("", true), f.$slots[f.vertical ? "arrow-down" : "arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(f.vertical ? unref(Bn) : unref(Rn)), { key: 1 }))]), _: 3 }, 8, ["arial-label"])) : createCommentVNode("", true)], 64)) : createCommentVNode("", true), f.monthPicker ? (openBlock(), createBlock(At, mergeProps({ key: 1 }, unref(C)("month"), { "skip-active": t.range, year: f.year, "multi-model-value": unref(Z), modelValue: unref(r), "onUpdate:modelValue": T[15] || (T[15] = (B) => isRef(r) ? r.value = B : null), onToggle: $, onSelected: T[16] || (T[16] = (B) => f.$emit("overlay-closed")) }), createSlots({ header: withCtx(() => [createBaseVNode("div", Yr, [createBaseVNode("div", { class: "dp__month_year_col_nav", tabindex: "0", ref_key: "mpPrevIconRef", ref: E, onClick: T[9] || (T[9] = (B) => I(false)), onKeydown: T[10] || (T[10] = withKeys((B) => I(false), ["enter"])) }, [createBaseVNode("div", { class: "dp__inner_nav", role: "button", "aria-label": unref(Y).prevMonth }, [f.$slots["arrow-left"] ? renderSlot(f.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true), f.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(_n), { key: 1 }))], 8, Fr)], 544), createBaseVNode("div", { class: "dp__pointer", role: "button", ref_key: "mpYearButtonRef", ref: w, "aria-label": unref(Y).openYearsOverlay, tabindex: "0", onClick: L, onKeydown: withKeys(L, ["enter"]) }, [f.$slots.year ? renderSlot(f.$slots, "year", { key: 0, year: f.year }) : createCommentVNode("", true), f.$slots.year ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [createTextVNode(toDisplayString(f.year), 1)], 64))], 40, Er), createBaseVNode("div", { class: "dp__month_year_col_nav", tabindex: "0", ref_key: "mpNextIconRef", ref: V, onClick: T[11] || (T[11] = (B) => I(true)), onKeydown: T[12] || (T[12] = withKeys((B) => I(true), ["enter"])) }, [createBaseVNode("div", { class: "dp__inner_nav", role: "button", "aria-label": unref(Y).nextMonth }, [f.$slots["arrow-right"] ? renderSlot(f.$slots, "arrow-right", { key: 0 }) : createCommentVNode("", true), f.$slots["arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Rn), { key: 1 }))], 8, Lr)], 544)]), createVNode(Transition, { name: unref(i)(y.value), css: unref(m) }, { default: withCtx(() => [y.value ? (openBlock(), createBlock(At, mergeProps({ key: 0 }, unref(C)("year"), { modelValue: unref(P), "onUpdate:modelValue": T[13] || (T[13] = (B) => isRef(P) ? P.value = B : null), onToggle: L, onSelected: T[14] || (T[14] = (B) => f.$emit("overlay-closed")) }), createSlots({ "button-icon": withCtx(() => [f.$slots["calendar-icon"] ? renderSlot(f.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true), f.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Yt), { key: 1 }))]), _: 2 }, [f.$slots["year-overlay"] ? { name: "item", fn: withCtx(({ item: B }) => [renderSlot(f.$slots, "year-overlay", { text: B.text, value: B.value })]) } : void 0]), 1040, ["modelValue"])) : createCommentVNode("", true)]), _: 3 }, 8, ["name", "css"])]), _: 2 }, [f.$slots["month-overlay"] ? { name: "item", fn: withCtx(({ item: B }) => [renderSlot(f.$slots, "month-overlay", { text: B.text, value: B.value })]) } : void 0]), 1040, ["skip-active", "year", "multi-model-value", "modelValue"])) : createCommentVNode("", true), e.yearPicker ? (openBlock(), createBlock(At, mergeProps({ key: 2 }, unref(C)("year"), { modelValue: unref(P), "onUpdate:modelValue": T[17] || (T[17] = (B) => isRef(P) ? P.value = B : null), "skip-button-ref": "", onToggle: L, onSelected: T[18] || (T[18] = (B) => f.$emit("overlay-closed")) }), createSlots({ _: 2 }, [f.$slots["year-overlay"] ? { name: "item", fn: withCtx(({ item: B }) => [renderSlot(f.$slots, "year-overlay", { text: B.text, value: B.value })]) } : void 0]), 1040, ["modelValue"])) : createCommentVNode("", true)]));
} });
var Hr = (e, a, n, t) => {
  const i = ref(new Date()), m = ref(), v = ref([{ month: getMonth(new Date()), year: getYear(new Date()) }]), p = ref(e.range ? [getHours(new Date()), getHours(new Date())] : getHours(new Date())), y = ref(e.range ? [getMinutes(new Date()), getMinutes(new Date())] : getMinutes(new Date())), _ = ref(e.range ? [0, 0] : 0);
  watch(v, () => {
    setTimeout(() => {
      e.openOnTop && a("dpOpen");
    }, 0);
  }, { deep: true }), onMounted(() => {
    X(true), r.value || (e.startDate && (v.value[0].month = getMonth(new Date(e.startDate)), v.value[0].year = getYear(new Date(e.startDate)), e.multiCalendars && B(0)), e.startTime && z());
  });
  const E = computed(() => (l) => v.value[l] ? v.value[l].month : 0), w = computed(() => (l) => v.value[l] ? v.value[l].year : 0), V = (l, k, A) => {
    v.value[l].month = k, v.value[l].year = A;
  }, Y = (l, k) => v.value[l].month = k, F = (l, k) => v.value[l].year = k, H = (l = true) => e.enableSeconds ? Array.isArray(_.value) ? l ? _.value[0] : _.value[1] : _.value : 0, z = () => {
    e.startTime && (ir(e.startTime) ? (p.value = [+e.startTime[0].hours, +e.startTime[1].hours], y.value = [+e.startTime[0].minutes, +e.startTime[1].minutes], e.enableSeconds && (_.value = [+e.startTime[0].seconds, +e.startTime[1].seconds])) : (p.value = +e.startTime.hours, y.value = +e.startTime.minutes, e.enableSeconds && (_.value = +e.startTime.seconds)));
  }, r = computed({ get: () => e.internalModelValue, set: (l) => {
    !e.readonly && !e.disabled && a("update:internalModelValue", l);
  } });
  watch(r, () => X());
  const P = (l) => {
    const { validate: k } = Ln(e.minDate, e.maxDate, e.disabledDates, e.allowedDates, e.filters, e.disabledWeekDays, e.yearRange);
    return !k(l);
  }, C = (l) => !r.value || e.hideOffsetDates && !l.current ? false : e.range ? e.modelAuto && Array.isArray(r.value) ? ie(l.value, r.value[0] ? r.value[0] : i.value) : false : e.multiDates && Array.isArray(r.value) ? r.value.some((k) => ie(k, l.value)) : ie(l.value, r.value ? r.value : i.value), h = (l) => En(r.value, m.value, l.value), N = (l, k = false) => {
    if ((!e.multiCalendars || !e.multiStatic || k) && (Y(0, getMonth(l)), F(0, getYear(l))), e.multiCalendars)
      for (let A = 1; A <= e.multiCalendars; A++) {
        const x = set(new Date(), { month: E.value(A - 1), year: w.value(A - 1) }), Ce = add(x, { months: 1 });
        v.value[A] = { month: getMonth(Ce), year: getYear(Ce) };
      }
  }, j = () => {
    if (Array.isArray(r.value) && r.value.length === 2) {
      const l = new Date(r.value[1] ? r.value[1] : addMonths(r.value[0], 1)), [k, A] = [getMonth(r.value[0]), getYear(r.value[0])], [x, Ce] = [getMonth(r.value[1]), getYear(r.value[1])];
      (k !== x || k === x && A !== Ce) && e.multiCalendarsSolo && (Y(1, getMonth(l)), F(1, getYear(l)));
    }
  }, ne = (l) => {
    N(l), p.value = getHours(l), y.value = getMinutes(l), _.value = getSeconds(l);
  }, Z = () => Array.isArray(r.value) && r.value.length ? r.value[r.value.length - 1] : null, X = (l = false) => {
    if (r.value)
      if (St(r.value)) {
        if (r.value.length === 2 && !e.multiDates)
          N(r.value[0], l), p.value = [getHours(r.value[0]), r.value[1] ? getHours(r.value[1]) : getHours(new Date())], y.value = [getMinutes(r.value[0]), r.value[1] ? getMinutes(r.value[1]) : getMinutes(new Date())], _.value = [getSeconds(r.value[0]), r.value[1] ? getSeconds(r.value[1]) : getSeconds(new Date())];
        else if (St(r.value) && e.multiDates) {
          const k = r.value[r.value.length - 1];
          k && ne(k);
        }
        e.multiCalendars && e.multiCalendarsSolo && j();
      } else
        ne(r.value);
    else
      e.timePicker ? (z(), e.range ? Ye(p.value) && Ye(y.value) && (r.value = [Ae(new Date(), p.value[0], y.value[0], H()), Ae(new Date(), p.value[1], y.value[1], H(false))]) : r.value = Ae(new Date(), p.value, y.value, H())) : e.monthPicker && !e.range ? r.value = ot(new Date(), E.value(0), w.value(0)) : e.multiCalendars ? N(new Date()) : e.yearPicker && (r.value = new Date());
  }, Q = (l) => {
    const k = getMonth(new Date(l)), A = getYear(new Date(l));
    if (Y(0, k), F(0, A), e.multiCalendars > 0)
      for (let x = 1; x < e.multiCalendars; x++) {
        const Ce = Sl(set(new Date(l), { year: E.value(x - 1), month: w.value(x - 1) }));
        Y(x, Ce.month), F(x, Ce.year);
      }
  }, M = (l) => {
    if (r.value && Array.isArray(r.value))
      if (r.value.some((k) => ie(l, k))) {
        const k = r.value.filter((A) => !ie(A, l));
        r.value = k.length ? k : null;
      } else
        (e.multiDatesLimit && +e.multiDatesLimit > r.value.length || !e.multiDatesLimit) && r.value.push(l);
    else
      r.value = [l];
  }, o = (l) => {
    if (Array.isArray(r.value) && r.value[0]) {
      const k = differenceInCalendarDays(l, r.value[0]), A = Math.abs(k < 0 ? k + 1 : k - 1);
      if (e.minRange && e.maxRange)
        return A >= +e.minRange && A <= +e.maxRange;
      if (e.minRange)
        return A >= +e.minRange;
      if (e.maxRange)
        return A <= +e.maxRange;
    }
    return true;
  }, b = (l) => Array.isArray(r.value) && r.value.length === 2 ? e.fixedStart && (Te(l, r.value[0]) || ie(l, r.value[0])) ? [r.value[0], l] : e.fixedEnd && (be(l, r.value[1]) || ie(l, r.value[1])) ? [l, r.value[1]] : r.value : [], u = () => {
    e.autoApply && a("autoApply");
  }, $ = (l) => !eachDayOfInterval({ start: l[0], end: l[1] }).some((k) => P(k)), L = (l, k = false) => {
    if (!P(l.value) && !(!l.current && e.hideOffsetDates)) {
      if (e.weekPicker)
        return r.value = Et(new Date(l.value), +e.weekStart), u();
      if (!e.range && !Ye(p.value) && !Ye(y.value)) {
        const A = Ae(new Date(l.value), p.value, y.value, H());
        e.multiDates ? M(A) : r.value = A, n(), u();
      } else if (Ye(p.value) && Ye(y.value) && !e.multiDates) {
        let A = r.value ? r.value.slice() : [];
        if (A.length === 2 && !(e.fixedStart || e.fixedEnd) && (A = []), e.autoRange) {
          const x = [new Date(l.value), addDays(new Date(l.value), +e.autoRange)];
          $(x) && (k && Q(l.value), A = x);
        } else
          e.fixedStart || e.fixedEnd ? A = b(new Date(l.value)) : A[0] ? o(new Date(l.value)) && (be(new Date(l.value), new Date(A[0])) ? A.unshift(new Date(l.value)) : A[1] = new Date(l.value)) : A[0] = new Date(l.value);
        A.length && (A[0] && !A[1] ? A[0] = Ae(A[0], p.value[0], y.value[0], H()) : (A[0] = Ae(A[0], p.value[0], y.value[0], H()), A[1] = Ae(A[1], p.value[1], y.value[1], H(false)), n()), r.value = A, A[0] && A[1] && e.autoApply && a("autoApply"));
      }
    }
  }, ae = (l) => {
    const k = l.find((A) => A.current);
    return k ? getISOWeek(k.value) : "";
  }, I = (l) => {
    !l.current && e.hideOffsetDates || (m.value = l.value);
  }, se = (l) => {
    if (e.autoRange || e.weekPicker) {
      if (m.value) {
        if (e.hideOffsetDates && !l.current)
          return false;
        const k = addDays(m.value, +e.autoRange), A = Et(new Date(m.value), +e.weekStart);
        return e.weekPicker ? ie(A[1], new Date(l.value)) : ie(k, new Date(l.value));
      }
      return false;
    }
    return false;
  }, f = (l) => {
    if (e.autoRange || e.weekPicker) {
      if (m.value) {
        const k = addDays(m.value, +e.autoRange);
        if (e.hideOffsetDates && !l.current)
          return false;
        const A = Et(new Date(m.value), +e.weekStart);
        return e.weekPicker ? Te(l.value, A[0]) && be(l.value, A[1]) : Te(l.value, m.value) && be(l.value, k);
      }
      return false;
    }
    return false;
  }, T = (l) => {
    if (e.autoRange || e.weekPicker) {
      if (m.value) {
        if (e.hideOffsetDates && !l.current)
          return false;
        const k = Et(new Date(m.value), +e.weekStart);
        return e.weekPicker ? ie(k[0], l.value) : ie(m.value, l.value);
      }
      return false;
    }
    return false;
  }, B = (l) => {
    for (let k = l - 1; k >= 0; k--) {
      const A = subMonths(set(new Date(), { month: E.value(k + 1), year: w.value(k + 1) }), 1);
      V(k, getMonth(A), getYear(A));
    }
    for (let k = l + 1; k <= e.multiCalendars - 1; k++) {
      const A = addMonths(set(new Date(), { month: E.value(k - 1), year: w.value(k - 1) }), 1);
      V(k, getMonth(A), getYear(A));
    }
  }, ke = (l) => ot(new Date(), E.value(l), w.value(l)), Fe = (l, k) => {
    const A = E.value(l) !== k.month;
    if (Y(l, k.month), F(l, k.year), e.multiCalendars && !e.multiCalendarsSolo && B(l), e.monthPicker)
      if (e.range) {
        if (A) {
          let x = r.value ? r.value.slice() : [];
          x.length === 2 && x[1] !== null && (x = []), x.length ? be(ke(l), x[0]) ? x.unshift(ke(l)) : x[1] = ke(l) : x = [ke(l)], r.value = x;
        }
      } else
        r.value = ke(l);
    n(), a("updateMonthYear", { instance: l, month: k.month, year: k.year }), Ct(e.multiCalendarsSolo ? l : void 0);
  }, Ze = (l) => Ae(l, p.value, y.value, H()), Ke = (l) => {
    St(l) && St(r.value) && Ye(p.value) && Ye(y.value) ? (l[0] && r.value[0] && (r.value[0] = Ae(l[0], p.value[0], y.value[0], H())), l[1] && r.value[1] && (r.value[1] = Ae(l[1], p.value[1], y.value[1], H(false)))) : e.multiDates && Array.isArray(r.value) ? r.value[r.value.length - 1] = Ze(l) : !e.range && !Wt(l) && (r.value = Ze(l)), a("timeUpdate");
  }, Oe = (l, k = true, A = false) => {
    const x = k ? l : p.value, Ce = !k && !A ? l : y.value, gt = A ? l : _.value;
    if (e.range && Wt(r.value) && Ye(x) && Ye(Ce) && Ye(gt) && !e.disableTimeRangeValidation) {
      const nt = (We) => Ae(r.value[We], x[We], Ce[We], gt[We]), Tt = (We) => setMilliseconds(r.value[We], 0);
      if (ie(r.value[0], r.value[1]) && (isAfter(nt(0), Tt(1)) || isBefore(nt(1), Tt(0))))
        return;
    }
    if (p.value = x, y.value = Ce, _.value = gt, r.value)
      if (e.multiDates) {
        const nt = Z();
        nt && Ke(nt);
      } else
        Ke(r.value);
    else
      e.timePicker && Ke(e.range ? [new Date(), new Date()] : new Date());
    n();
  }, Qe = () => {
    m.value = null;
  }, vt = (l) => ea(r.value, e.range) && r.value[0] && m.value ? l ? Te(m.value, r.value[0]) : be(m.value, r.value[0]) : true, Ee = (l, k = true) => (e.range || e.weekPicker) && Wt(r.value) ? e.hideOffsetDates && !l.current ? false : ie(new Date(l.value), r.value[k ? 0 : 1]) : e.range ? ie(new Date(l.value), r.value && Array.isArray(r.value) ? k ? r.value[0] || null : r.value[1] : null) && (k ? !be(m.value || null, Array.isArray(r.value) ? r.value[0] : null) : true) || ie(l.value, Array.isArray(r.value) ? r.value[0] : null) && vt(k) : false, Pe = (l, k) => Array.isArray(e.internalModelValue) && e.internalModelValue.length || e.weekPicker ? false : !l && !C(k) && !(!k.current && e.hideOffsetDates) && (e.range ? !Ee(k) && !Ee(k, false) : true), ft = (l, k, A) => Array.isArray(e.internalModelValue) && e.internalModelValue[0] && e.internalModelValue.length === 1 ? l ? false : A ? Te(e.internalModelValue[0], k.value) : be(e.internalModelValue[0], k.value) : false, xe = (l = false) => {
    l && e.yearPicker && (r.value = setYear(new Date(), v.value[0].year), e.autoApply && a("autoApply")), e.autoApply && e.monthPicker && nextTick().then(() => {
      e.range ? a("autoApply", l || !r.value || r.value.length === 1) : a("autoApply", l);
    });
  }, et = (l, k) => {
    const A = set(new Date(), { month: E.value(k), year: w.value(k) }), x = l < 0 ? addMonths(A, 1) : subMonths(A, 1);
    ra(e.minDate, e.maxDate, getMonth(x), getYear(x), l < 0, e.preventMinMaxNavigation) && (V(k, getMonth(x), getYear(x)), e.multiCalendars && !e.multiCalendarsSolo && B(k), Ct());
  }, yt = (l, k) => {
    e.monthChangeOnScroll && et(e.monthChangeOnScroll !== "inverse" ? -l.deltaY : l.deltaY, k);
  }, c = (l, k, A = false) => {
    e.monthChangeOnArrows && e.vertical === A && re(l, k);
  }, re = (l, k) => {
    et(l === "right" ? -1 : 1, k);
  }, fe = (l) => e.markers.find((k) => ie(_e(l.value), _e(k.date))), ht = () => {
    e.range ? ea(r.value, e.range) && (r.value && r.value[0] ? r.value = be(new Date(), r.value[0]) ? [new Date(), r.value[0]] : [r.value[0], new Date()] : r.value = [new Date()]) : a("update:internalModelValue", new Date()), e.autoApply && a("selectDate");
  }, tt = (l) => {
    l.length && l.length <= 2 && e.range && (r.value = l.map((k) => new Date(k)), e.autoApply && a("selectDate"));
  }, Ct = (l) => {
    l || l === 0 ? t.value[l].triggerTransition(E.value(l), w.value(l)) : t.value.forEach((k, A) => k.triggerTransition(E.value(A), w.value(A)));
  };
  return { today: i, hours: p, minutes: y, seconds: _, month: E, year: w, monthYearSelect: xe, isDisabled: P, updateTime: Oe, setHoverDate: I, getWeekNum: ae, selectDate: L, rangeActive: h, isActiveDate: C, updateMonthYear: Fe, isHoverRangeEnd: se, isAutoRangeInBetween: f, isAutoRangeStart: T, clearHoverDate: Qe, rangeActiveStartEnd: Ee, handleScroll: yt, getMarker: fe, handleArrow: c, handleSwipe: re, selectCurrentDate: ht, isHoverDate: Pe, isHoverDateStartEnd: ft, presetDateRange: tt };
};
var Wr = ["id", "aria-label", "onKeydown"];
var Ur = { key: 0, class: "dp__preset_ranges" };
var jr = ["onClick"];
var Gr = { key: 1, class: "dp__now_wrap" };
var zr = defineComponent({ __name: "DatepickerMenu", props: De(J(J(J({}, Zn), sn), on), { internalModelValue: { type: [Date, Array], default: null }, multiCalendars: { type: Number, default: 0 }, openOnTop: { type: Boolean, default: false } }), emits: ["update:internalModelValue", "closePicker", "selectDate", "dpOpen", "autoApply", "timeUpdate", "flow-step", "updateMonthYear"], setup(e, { emit: a }) {
  const n = e, t = useSlots(), i = ref(null), m = reactive({ timePicker: !!(!n.enableTimePicker || n.timePicker || n.monthPicker), monthYearInput: !!n.timePicker, calendar: false }), v = ref([]), p = ref([]), y = ref(null), _ = ref(null), E = ref(0), w = ref(false), V = ref(0), Y = inject(Lt), F = inject(Xe), H = inject(qe), { setMenuFocused: z, setShiftKey: r } = cn();
  onMounted(() => {
    var G;
    w.value = true, (G = n.presetRanges) != null && G.length || A();
    const d = he(_);
    if (d && !n.textInput && !n.inline && (z(true), j()), d) {
      const W = (q) => {
        q.stopImmediatePropagation(), q.stopPropagation();
      };
      d.addEventListener("pointerdown", W), d.addEventListener("mousedown", W);
    }
    document.addEventListener("resize", A);
  }), onUnmounted(() => {
    document.removeEventListener("resize", A);
  });
  const { arrowRight: P, arrowLeft: C, arrowDown: h, arrowUp: N } = Je(), j = () => {
    const d = he(_);
    d && d.focus({ preventScroll: true });
  }, ne = () => {
    var d;
    ((d = n.flow) == null ? void 0 : d.length) && V.value !== -1 && (V.value += 1, a("flow-step", V.value), wn());
  }, Z = () => {
    V.value = -1;
  }, { updateTime: X, updateMonthYear: Q, today: M, month: o, year: b, hours: u, minutes: $, seconds: L, isDisabled: ae, isActiveDate: I, selectDate: se, getWeekNum: f, setHoverDate: T, isHoverRangeEnd: B, isAutoRangeInBetween: ke, isAutoRangeStart: Fe, rangeActive: Ze, clearHoverDate: Ke, rangeActiveStartEnd: Oe, monthYearSelect: Qe, handleScroll: vt, handleArrow: Ee, handleSwipe: Pe, getMarker: ft, selectCurrentDate: xe, isHoverDateStartEnd: et, isHoverDate: yt, presetDateRange: c } = Hr(n, a, ne, p), re = st(t, "calendar"), fe = st(t, "action"), ht = st(t, "timePicker"), tt = st(t, "monthYear"), Ct = computed(() => n.openOnTop ? "dp__arrow_bottom" : "dp__arrow_top"), l = computed(() => Bl(n.yearRange)), k = computed(() => Nl(n.locale, n.monthNameFormat)), A = () => {
    const d = he(i);
    d && (E.value = d.getBoundingClientRect().width);
  }, x = computed(() => (d) => Rl(o.value(d), b.value(d), +n.weekStart, n.hideOffsetDates)), Ce = computed(() => n.multiCalendars > 0 && n.range ? [...Array(n.multiCalendars).keys()] : [0]), gt = computed(() => (d) => d === 1), nt = computed(() => n.monthPicker || n.timePicker || n.yearPicker), Tt = computed(() => ({ dp__flex_display: n.multiCalendars > 0 })), We = computed(() => ({ dp__instance_calendar: n.multiCalendars > 0 })), oa = computed(() => ({ dp__menu_disabled: n.disabled, dp__menu_readonly: n.readonly })), sa = computed(() => (d) => ca(x, d)), ua = computed(() => ({ locale: n.locale, weekNumName: n.weekNumName, weekStart: n.weekStart, weekNumbers: n.weekNumbers, customProps: n.customProps, calendarClassName: n.calendarClassName, specificMode: nt.value, getWeekNum: f, multiCalendars: n.multiCalendars, modeHeight: n.modeHeight, internalModelValue: n.internalModelValue, noSwipe: n.noSwipe, vertical: n.vertical, dayNames: n.dayNames, monthChangeOnScroll: n.monthChangeOnScroll })), ia = computed(() => ({ dp__menu: true, dp__menu_index: !n.inline, dp__relative: n.inline, [n.menuClassName]: !!n.menuClassName })), da = () => n.modelAuto && Array.isArray(n.internalModelValue) ? !!n.internalModelValue[0] : false, wt = () => n.modelAuto ? Hn(n.internalModelValue) : true, ca = (d, G) => d.value(G).map((W) => De(J({}, W), { days: W.days.map((q) => {
    const ee = ae(q.value), kt = yt(ee, q), ut = (n.range || n.weekPicker) && (n.multiCalendars > 0 ? q.current : true) && !ee && wt() && !(!q.current && n.hideOffsetDates) && !I(q) ? Ze(q) : false;
    return q.marker = ft(q), q.classData = { dp__cell_offset: !q.current, dp__pointer: !ee && !(!q.current && n.hideOffsetDates), dp__active_date: n.range ? n.modelAuto ? da() && I(q) : false : I(q), dp__date_hover: kt, dp__date_hover_start: et(kt, q, true), dp__date_hover_end: et(kt, q, false), dp__range_between: ut && !n.weekPicker, dp__range_between_week: ut && n.weekPicker, dp__today: !n.noToday && ie(q.value, M.value) && q.current, dp__cell_disabled: ee, dp__cell_auto_range: ke(q), dp__cell_auto_range_start: Fe(q), dp__cell_auto_range_end: B(q), dp__range_start: n.multiCalendars > 0 ? q.current && Oe(q) && wt() : Oe(q) && wt(), dp__range_end: n.multiCalendars > 0 ? q.current && Oe(q, false) && wt() : Oe(q, false) && wt(), [n.calendarCellClassName]: !!n.calendarCellClassName }, q;
  }) })), ma = (d) => {
    d.stopPropagation(), d.preventDefault(), d.stopImmediatePropagation();
  }, pa = () => {
    n.escClose && a("closePicker");
  }, va = (d) => {
    d.stopImmediatePropagation(), d.preventDefault(), n.spaceConfirm && a("selectDate");
  }, zt = (d) => {
    var G;
    (G = n.flow) != null && G.length && (m[d] = true, Object.keys(m).filter((W) => !m[W]).length || wn());
  }, wn = () => {
    n.flow[V.value] === "month" && v.value[0] && v.value[0].toggleMonthPicker(true), n.flow[V.value] === "year" && v.value && v.value[0].toggleYearPicker(true), n.flow[V.value] === "calendar" && y.value && y.value.toggleTimePicker(false, true), n.flow[V.value] === "time" && y.value && y.value.toggleTimePicker(true, true);
    const d = n.flow[V.value];
    (d === "hours" || d === "minutes" || d === "seconds") && y.value && y.value.toggleTimePicker(true, true, d);
  }, _t = (d) => {
    if (H != null && H.value) {
      if (d === "up")
        return N();
      if (d === "down")
        return h();
      if (d === "left")
        return C();
      if (d === "right")
        return P();
    } else
      d === "left" || d === "up" ? Ee("left", 0, d === "up") : Ee("right", 0, d === "down");
  }, fa = (d) => {
    r(d.shiftKey);
  };
  return (d, G) => (openBlock(), createBlock(Transition, { appear: "", name: unref(Y).menuAppear, mode: "out-in", css: !!unref(Y) }, { default: withCtx(() => [createBaseVNode("div", { id: d.uid ? `dp-menu-${d.uid}` : void 0, tabindex: "0", ref_key: "dpMenuRef", ref: _, role: "dialog", "aria-label": unref(F).menu, class: normalizeClass(unref(ia)), onMouseleave: G[11] || (G[11] = (...W) => unref(Ke) && unref(Ke)(...W)), onClick: ma, onKeydown: [withKeys(pa, ["esc"]), withKeys(va, ["space"]), G[12] || (G[12] = withKeys(withModifiers((W) => _t("left"), ["prevent"]), ["left"])), G[13] || (G[13] = withKeys(withModifiers((W) => _t("up"), ["prevent"]), ["up"])), G[14] || (G[14] = withKeys(withModifiers((W) => _t("down"), ["prevent"]), ["down"])), G[15] || (G[15] = withKeys(withModifiers((W) => _t("right"), ["prevent"]), ["right"])), fa] }, [(d.disabled || d.readonly) && d.inline ? (openBlock(), createElementBlock("div", { key: 0, class: normalizeClass(unref(oa)) }, null, 2)) : createCommentVNode("", true), d.inline ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", { key: 1, class: normalizeClass(unref(Ct)) }, null, 2)), createBaseVNode("div", { class: normalizeClass(d.presetRanges.length ? "dp__menu_content_wrapper" : null) }, [d.presetRanges.length ? (openBlock(), createElementBlock("div", Ur, [(openBlock(true), createElementBlock(Fragment, null, renderList(d.presetRanges, (W, q) => (openBlock(), createElementBlock("div", { key: q, class: "dp__preset_range", onClick: (ee) => unref(c)(W.range) }, toDisplayString(W.label), 9, jr))), 128))])) : createCommentVNode("", true), createBaseVNode("div", { class: "dp__instance_calendar", ref_key: "calendarWrapperRef", ref: i, role: "document" }, [createBaseVNode("div", { class: normalizeClass(unref(Tt)) }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(Ce), (W, q) => (openBlock(), createElementBlock("div", { key: W, class: normalizeClass(unref(We)) }, [!d.disableMonthYearSelect && !d.timePicker ? (openBlock(), createBlock(resolveDynamicComponent(d.monthYearComponent ? d.monthYearComponent : Kr), mergeProps({ key: 0, ref_for: true, ref: (ee) => {
    ee && (v.value[q] = ee);
  } }, { months: unref(k), years: unref(l), filters: d.filters, monthPicker: d.monthPicker, month: unref(o)(W), year: unref(b)(W), customProps: d.customProps, multiCalendars: e.multiCalendars, multiCalendarsSolo: d.multiCalendarsSolo, instance: W, minDate: d.minDate, maxDate: d.maxDate, preventMinMaxNavigation: d.preventMinMaxNavigation, internalModelValue: e.internalModelValue, range: d.range, reverseYears: d.reverseYears, vertical: d.vertical, yearPicker: d.yearPicker }, { onMount: G[0] || (G[0] = (ee) => zt("monthYearInput")), onResetFlow: Z, onUpdateMonthYear: (ee) => unref(Q)(W, ee), onMonthYearSelect: unref(Qe), onOverlayClosed: j }), createSlots({ _: 2 }, [renderList(unref(tt), (ee, kt) => ({ name: ee, fn: withCtx((ut) => [renderSlot(d.$slots, ee, normalizeProps(guardReactiveProps(ut)))]) }))]), 1040, ["onUpdateMonthYear", "onMonthYearSelect"])) : createCommentVNode("", true), createVNode(ar, mergeProps({ ref_for: true, ref: (ee) => {
    ee && (p.value[q] = ee);
  } }, unref(ua), { "flow-step": V.value, "onUpdate:flow-step": G[1] || (G[1] = (ee) => V.value = ee), instance: W, "mapped-dates": unref(sa)(W), month: unref(o)(W), year: unref(b)(W), onSelectDate: (ee) => unref(se)(ee, !unref(gt)(W)), onSetHoverDate: G[2] || (G[2] = (ee) => unref(T)(ee)), onHandleScroll: (ee) => unref(vt)(ee, W), onHandleSwipe: (ee) => unref(Pe)(ee, W), onMount: G[3] || (G[3] = (ee) => zt("calendar")), onResetFlow: Z }), createSlots({ _: 2 }, [renderList(unref(re), (ee, kt) => ({ name: ee, fn: withCtx((ut) => [renderSlot(d.$slots, ee, normalizeProps(guardReactiveProps(J({}, ut))))]) }))]), 1040, ["flow-step", "instance", "mapped-dates", "month", "year", "onSelectDate", "onHandleScroll", "onHandleSwipe"])], 2))), 128))], 2), createBaseVNode("div", null, [d.enableTimePicker && !d.monthPicker && !d.weekPicker ? (openBlock(), createBlock(resolveDynamicComponent(d.timePickerComponent ? d.timePickerComponent : Or), mergeProps({ key: 0, ref_key: "timePickerRef", ref: y }, { is24: d.is24, hoursIncrement: d.hoursIncrement, minutesIncrement: d.minutesIncrement, hoursGridIncrement: d.hoursGridIncrement, secondsIncrement: d.secondsIncrement, minutesGridIncrement: d.minutesGridIncrement, secondsGridIncrement: d.secondsGridIncrement, noHoursOverlay: d.noHoursOverlay, noMinutesOverlay: d.noMinutesOverlay, noSecondsOverlay: d.noSecondsOverlay, range: d.range, filters: d.filters, timePicker: d.timePicker, hours: unref(u), minutes: unref($), seconds: unref(L), customProps: d.customProps, enableSeconds: d.enableSeconds, fixedStart: d.fixedStart, fixedEnd: d.fixedEnd, modelAuto: d.modelAuto, internalModelValue: e.internalModelValue }, { onMount: G[4] || (G[4] = (W) => zt("timePicker")), "onUpdate:hours": G[5] || (G[5] = (W) => unref(X)(W)), "onUpdate:minutes": G[6] || (G[6] = (W) => unref(X)(W, false)), "onUpdate:seconds": G[7] || (G[7] = (W) => unref(X)(W, false, true)), onResetFlow: Z, onOverlayClosed: j }), createSlots({ _: 2 }, [renderList(unref(ht), (W, q) => ({ name: W, fn: withCtx((ee) => [renderSlot(d.$slots, W, normalizeProps(guardReactiveProps(ee)))]) }))]), 1040)) : createCommentVNode("", true)])], 512), d.showNowButton ? (openBlock(), createElementBlock("div", Gr, [d.$slots["now-button"] ? renderSlot(d.$slots, "now-button", { key: 0, selectCurrentDate: unref(xe) }) : createCommentVNode("", true), d.$slots["now-button"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("button", { key: 1, type: "button", role: "button", class: "dp__now_button", onClick: G[8] || (G[8] = (...W) => unref(xe) && unref(xe)(...W)) }, toDisplayString(d.nowButtonLabel), 1))])) : createCommentVNode("", true)], 2), !d.autoApply || d.keepActionRow ? (openBlock(), createBlock(resolveDynamicComponent(d.actionRowComponent ? d.actionRowComponent : vr), mergeProps({ key: 2 }, { calendarWidth: E.value, selectText: d.selectText, cancelText: d.cancelText, internalModelValue: e.internalModelValue, range: d.range, previewFormat: d.previewFormat, inline: d.inline, monthPicker: d.monthPicker, timePicker: d.timePicker, customProps: d.customProps, multiCalendars: e.multiCalendars, menuMount: w.value, maxTime: d.maxTime, minTime: d.minTime, enableTimePicker: d.enableTimePicker, minDate: d.minDate, maxDate: d.maxDate, multiDates: d.multiDates, modelAuto: d.modelAuto }, { onClosePicker: G[9] || (G[9] = (W) => d.$emit("closePicker")), onSelectDate: G[10] || (G[10] = (W) => d.$emit("selectDate")) }), createSlots({ _: 2 }, [renderList(unref(fe), (W, q) => ({ name: W, fn: withCtx((ee) => [renderSlot(d.$slots, W, normalizeProps(guardReactiveProps(J({}, ee))))]) }))]), 1040)) : createCommentVNode("", true)], 42, Wr)]), _: 3 }, 8, ["name", "css"]));
} });
var Gt = ((e) => (e.center = "center", e.left = "left", e.right = "right", e))(Gt || {});
var Xr = (e, a, n, t, i, m, v) => {
  const p = ref({ top: "0", left: "0", transform: "none" }), y = ref(false), _ = 10, E = 390, w = (C) => {
    const h = C.getBoundingClientRect();
    return { left: h.left + window.scrollX, top: h.top + window.scrollY };
  }, V = (C) => {
    const h = C.getBoundingClientRect();
    let N = 0, j = 0;
    for (; C && !isNaN(C.offsetLeft) && !isNaN(C.offsetTop); )
      N += C.offsetLeft - C.scrollLeft, j = h.top + C.scrollTop, C = C.offsetParent;
    return { top: j, left: N };
  }, Y = (C, h) => {
    p.value.left = `${C + h}px`, p.value.transform = "translateX(-100%)";
  }, F = (C) => {
    p.value.left = `${C}px`, p.value.transform = "translateX(0)";
  }, H = (C, h) => {
    e === Gt.left && F(C), e === Gt.right && Y(C, h), e === Gt.center && (p.value.left = `${C + h / 2}px`, p.value.transform = "translateX(-50%)");
  }, z = () => {
    const C = he(i);
    if (C) {
      const h = window.innerHeight, { top: N } = a ? V(C) : w(C), { left: j, width: ne, top: Z, height: X } = C.getBoundingClientRect(), Q = h - Z - X;
      p.value.top = Z > Q ? `${N - E}px` : `${N}px`, H(j, ne);
    }
  }, r = (C = true) => {
    if (!m) {
      const h = he(i);
      if (a && typeof a != "boolean")
        p.value = a(h);
      else if (h) {
        const { left: N, width: j, height: ne } = h.getBoundingClientRect(), { top: Z } = a ? V(h) : w(h);
        p.value.top = `${ne + Z + _}px`, H(N, j), C && n && P();
      }
    }
  }, P = () => {
    const C = he(i);
    if (C && n && !m) {
      const { height: h, top: N, left: j, width: ne } = C.getBoundingClientRect(), { top: Z } = a ? V(C) : w(C), X = window.innerHeight - N - h, Q = he(t);
      if (Q) {
        const { height: M, left: o, right: b } = Q.getBoundingClientRect(), u = M + h;
        u > N && u > X ? N < X && (r(false), y.value = false) : u > X ? (p.value.top = `${Z - M - _}px`, y.value = true) : (r(false), y.value = false), o < 0 ? F(j) : b > document.documentElement.clientWidth && Y(j, ne);
      }
    }
    v("recalculatePosition");
  };
  return { openOnTop: y, menuPosition: p, setMenuPosition: r, setInitialPosition: z, recalculatePosition: P };
};
var qr = (e, a, n, t, i, m, v, p, y, _, E, w, V, Y, F, H, z) => {
  const r = ref(""), P = ref();
  watch(P, () => {
    z("internalModelChange", P.value);
  });
  const C = (o) => [Z(o[0]), o[1] ? Z(o[1]) : null], h = (o) => {
    let b = null;
    o ? a ? rr(o) && "hours" in o[0] && "minutes" in o[0] ? b = [Ae(null, +o[0].hours, +o[0].minutes, +o[0].seconds), Ae(null, +o[1].hours, +o[1].minutes, +o[1].seconds)] : lr(o) && (b = Ae(null, +o.hours, +o.minutes, +o.seconds)) : n ? or(o) && "month" in o[0] && "year" in o[0] ? (b = [ot(null, +o[0].month, +o[0].year)], o[1] ? b[1] = ot(null, +o[1].month, +o[1].year) : !o[1] && i && (b[1] = null)) : sr(o) && "month" in o && "year" in o && (b = ot(null, +o.month, +o.year)) : V ? b = setYear(new Date(), o) : _ && Array.isArray(o) ? b = o.map((u) => Z(u)) : w && Array.isArray(o) ? b = [new Date(o[0]), new Date(o[1])] : t ? H ? Array.isArray(o) ? b = C(o) : b = [Z(o), null] : ur(o, i) && (b = C(o)) : dr(o) && (b = Z(o)) : b = null, xt(b) ? (P.value = b, j()) : (P.value = null, r.value = "");
  }, N = () => In(e, m, p, n, a, w, V, v), j = () => {
    if (!P.value)
      r.value = "";
    else if (!e || typeof e == "string") {
      const o = N();
      Array.isArray(P.value) && _ ? r.value = P.value.map((b) => pt(b, o, y == null ? void 0 : y.value)).join("; ") : r.value = pt(P.value, o, y == null ? void 0 : y.value, Y == null ? void 0 : Y.rangeSeparator, H);
    } else
      a ? r.value = e(tn(P.value)) : n ? r.value = e(Yn(P.value)) : r.value = e(P.value);
  }, ne = () => P.value ? t ? i ? P.value.length >= 1 : P.value.length === 2 : !!P.value : false, Z = (o) => F ? F === "date" || F === "timestamp" ? new Date(o) : F === "format" && (typeof e == "string" || !e) ? parse(o, N(), new Date()) : parse(o, F, new Date()) : new Date(o), X = (o) => F ? F === "timestamp" ? +o : F === "format" && (typeof e == "string" || !e) ? pt(o, N(), y == null ? void 0 : y.value, Y == null ? void 0 : Y.rangeSeparator) : pt(o, F, y == null ? void 0 : y.value, Y == null ? void 0 : Y.rangeSeparator) : o, Q = (o) => {
    z("update:modelValue", o);
  }, M = () => [X(P.value[0]), P.value[1] ? X(P.value[1]) : null];
  return { parseExternalModelValue: h, formatInputValue: j, internalModelValue: P, inputValue: r, emitModelValue: () => {
    if (n)
      Q(Yn(P.value));
    else if (a)
      Q(tn(P.value));
    else if (w)
      Q(P.value);
    else if (V)
      Q(getYear(P.value));
    else {
      if (P.value && t && i && P.value.length === 1 && P.value.push(null), E) {
        let o;
        if (Array.isArray(P.value)) {
          const b = (u) => u && _e(u);
          H ? o = P.value[1] ? P.value.map(b) : _e(P.value[0]) : o = P.value.map(b);
        } else
          o = _e(P.value);
        return Q(o);
      }
      Array.isArray(P.value) && !_ ? Q(H ? P.value[1] ? M() : X(P.value[0]) : M()) : Array.isArray(P.value) && _ ? Q(P.value.map((o) => X(o))) : Q(X(P.value));
    }
    j();
  }, checkBeforeEmit: ne };
};
var Jr = typeof window < "u" ? window : void 0;
var hn = () => {
};
var Zr = (e) => getCurrentScope() ? (onScopeDispose(e), true) : false;
var Qr = (e, a, n, t) => {
  if (!e)
    return hn;
  let i = hn;
  const m = watch(() => unref(e), (p) => {
    i(), p && (p.addEventListener(a, n, t), i = () => {
      p.removeEventListener(a, n, t), i = hn;
    });
  }, { immediate: true, flush: "post" }), v = () => {
    m(), i();
  };
  return Zr(v), v;
};
var xr = (e, a, n, t = {}) => {
  const { window: i = Jr, event: m = "pointerdown" } = t;
  return i ? Qr(i, m, (v) => {
    const p = he(e), y = he(a);
    !p || !y || p === v.target || v.composedPath().includes(p) || v.composedPath().includes(y) || n(v);
  }, { passive: true }) : void 0;
};
var eo = defineComponent({ __name: "VueDatePicker", props: J({}, Hl), emits: ["update:modelValue", "textSubmit", "closed", "cleared", "open", "focus", "blur", "internalModelChange", "recalculatePosition", "flow-step", "focus-prev", "updateMonthYear"], setup(e, { expose: a, emit: n }) {
  const t = e, i = useSlots(), m = ref(false), v = toRef(t, "modelValue"), p = ref(null), y = ref(null), _ = ref(null), E = ref(null);
  provide(rn, t.autoApply);
  const w = computed(() => t.formatLocale);
  provide(Un, w), provide(Wn, toRef(t, "textInput")), provide(qe, toRef(t, "arrowNavigation")), onMounted(() => {
    N(t.modelValue), t.inline || (window.addEventListener("scroll", B), window.addEventListener("resize", ke)), t.inline && (m.value = true);
  }), onUnmounted(() => {
    t.inline || (window.removeEventListener("scroll", B), window.removeEventListener("resize", ke));
  });
  const V = st(i, "all"), Y = st(i, "input");
  watch(v, () => {
    N(v.value);
  }, { deep: true });
  const { openOnTop: F, menuPosition: H, setMenuPosition: z, recalculatePosition: r, setInitialPosition: P } = Xr(t.position, t.altPosition, t.autoPosition, p, y, t.inline, n), { internalModelValue: C, inputValue: h, parseExternalModelValue: N, emitModelValue: j, checkBeforeEmit: ne, formatInputValue: Z } = qr(t.format, t.timePicker, t.monthPicker, t.range, t.partialRange, t.is24, t.enableTimePicker, t.enableSeconds, w, t.multiDates, t.utc, t.weekPicker, t.yearPicker, t.textInputOptions, t.modelType, t.modelAuto, n), { clearArrowNav: X } = Je(), { setMenuFocused: Q, setShiftKey: M } = cn(), o = computed(() => ({ dp__main: true, dp__theme_dark: t.dark, dp__theme_light: !t.dark, dp__flex_display: t.inline, dp__flex_display_with_input: t.inlineWithInput })), b = computed(() => ta(t.format) ? t.format : In(null, t.is24, t.enableSeconds, t.monthPicker, t.timePicker, t.weekPicker, t.yearPicker, t.enableTimePicker)), u = computed(() => t.previewFormat ? t.previewFormat : ta(b.value) ? b.value : t.format), $ = computed(() => typeof t.transitions == "boolean" ? t.transitions ? Kn({}) : false : Kn(t.transitions));
  provide(Lt, $);
  const L = computed(() => t.dark ? "dp__theme_dark" : "dp__theme_light"), ae = computed(() => Object.assign(Yl(), t.textInputOptions)), I = computed(() => Kl(t.ariaLabels));
  provide(Xe, I);
  const se = computed(() => Fl(t.filters)), f = computed(() => {
    const c = (re) => {
      const fe = { hours: getHours(new Date()), minutes: getMinutes(new Date()), seconds: getSeconds(new Date()) };
      return Object.assign(fe, re);
    };
    return t.range ? t.startTime && Array.isArray(t.startTime) ? [c(t.startTime[0]), c(t.startTime[1])] : null : t.startTime && !Array.isArray(t.startTime) ? c(t.startTime) : null;
  }), T = computed(() => t.multiCalendars === null ? 0 : typeof t.multiCalendars == "boolean" ? t.multiCalendars ? 2 : 0 : +t.multiCalendars >= 2 ? +t.multiCalendars : 2), B = () => {
    m.value && (t.closeOnScroll ? Pe() : t.autoPosition ? z() : window.removeEventListener("scroll", B));
  }, ke = () => {
    m.value && z();
  }, Fe = () => {
    !t.disabled && !t.readonly && (P(), m.value = true, nextTick().then(() => {
      z(), m.value && (n("open"), n("focus"));
    }), m.value || Ee(), N(t.modelValue));
  }, Ze = () => {
    h.value = "", Ee(), n("update:modelValue", null), n("cleared"), Pe();
  }, Ke = () => {
    const { validate: c } = Ln(t.minDate, t.maxDate, t.disabledDates, t.allowedDates, se.value, t.disabledWeekDays, t.yearRange), re = C.value;
    return !Array.isArray(re) && c(re) ? true : Array.isArray(re) ? re.length === 2 && c(re[0]) && c(re[1]) ? true : !!c(re[0]) : false;
  }, Oe = () => {
    ne() && Ke() && (j(), Pe());
  }, Qe = (c) => {
    j(), t.closeOnAutoApply && !c && Pe();
  }, vt = (c = false) => {
    t.autoApply && (!t.enableTimePicker || t.monthPicker || t.yearPicker ? true : ln(C.value, t.maxTime, t.minTime)) && Ke() && (t.range && Array.isArray(C.value) ? (t.partialRange || C.value.length === 2) && Qe(c) : Qe(c));
  }, Ee = () => {
    C.value = null;
  }, Pe = () => {
    t.inline || (m.value && (m.value = false, Q(false), M(false), X(), n("closed"), n("blur"), P(), h.value && N(v.value)), Ee(), y.value && y.value.unFocus(), et());
  }, ft = (c, re) => {
    if (!c) {
      C.value = null;
      return;
    }
    C.value = c, re && (Oe(), n("textSubmit"));
  }, xe = () => {
    t.autoApply && ln(C.value, t.maxTime, t.minTime) && j();
  }, et = () => {
    _.value && _.value.focus({ preventScroll: true });
  }, yt = () => m.value ? Pe() : Fe();
  return xr(p, y, Pe), a({ closeMenu: Pe, selectDate: Oe, clearValue: Ze, openMenu: Fe, onScroll: B, formatInputValue: Z }), (c, re) => (openBlock(), createElementBlock("div", { class: normalizeClass(unref(o)) }, [createBaseVNode("span", { tabindex: "-1", ref_key: "focusRefBefore", ref: E }, null, 512), createVNode(zl, mergeProps({ ref_key: "inputRef", ref: y }, { placeholder: c.placeholder, hideInputIcon: c.hideInputIcon, readonly: c.readonly, disabled: c.disabled, inputClassName: c.inputClassName, clearable: c.clearable, state: c.state, inline: c.inline, inlineWithInput: c.inlineWithInput, textInput: c.textInput, textInputOptions: unref(ae), range: c.range, isMenuOpen: m.value, pattern: unref(b), autoApply: c.autoApply, uid: c.uid, openMenuOnFocus: c.openMenuOnFocus, required: c.required, name: c.name, autocomplete: c.autocomplete }, { "input-value": unref(h), "onUpdate:input-value": re[0] || (re[0] = (fe) => isRef(h) ? h.value = fe : null), onClear: Ze, onOpen: Fe, onSetInputDate: ft, onSetEmptyDate: unref(j), onSelectDate: Oe, onToggle: yt, onClose: Pe, onFocusPrev: re[1] || (re[1] = (fe) => c.$emit("focus-prev")) }), createSlots({ _: 2 }, [renderList(unref(Y), (fe, ht) => ({ name: fe, fn: withCtx((tt) => [renderSlot(c.$slots, fe, normalizeProps(guardReactiveProps(tt)))]) }))]), 1040, ["input-value", "onSetEmptyDate"]), createBaseVNode("span", { tabindex: "-1", ref_key: "focusRef", ref: _ }, null, 512), m.value ? (openBlock(), createBlock(Teleport, { key: 0, to: c.teleport, disabled: c.inline }, [m.value ? (openBlock(), createBlock(zr, mergeProps({ key: 0, ref_key: "dpMenuRef", ref: p, class: unref(L), style: unref(H) }, { weekNumbers: c.weekNumbers, weekStart: c.weekStart, disableMonthYearSelect: c.disableMonthYearSelect, menuClassName: c.menuClassName, calendarClassName: c.calendarClassName, yearRange: c.yearRange, range: c.range, multiCalendars: unref(T), multiCalendarsSolo: c.multiCalendarsSolo, multiStatic: c.multiStatic, calendarCellClassName: c.calendarCellClassName, enableTimePicker: c.enableTimePicker, is24: c.is24, hoursIncrement: c.hoursIncrement, minutesIncrement: c.minutesIncrement, hoursGridIncrement: c.hoursGridIncrement, minutesGridIncrement: c.minutesGridIncrement, minDate: c.minDate, maxDate: c.maxDate, autoApply: c.autoApply, selectText: c.selectText, cancelText: c.cancelText, previewFormat: unref(u), locale: c.locale, weekNumName: c.weekNumName, disabledDates: c.disabledDates, filters: unref(se), minTime: c.minTime, maxTime: c.maxTime, inline: c.inline, openOnTop: unref(F), monthPicker: c.monthPicker, timePicker: c.timePicker, monthNameFormat: c.monthNameFormat, startDate: c.startDate, startTime: unref(f), monthYearComponent: c.monthYearComponent, timePickerComponent: c.timePickerComponent, actionRowComponent: c.actionRowComponent, customProps: c.customProps, hideOffsetDates: c.hideOffsetDates, autoRange: c.autoRange, noToday: c.noToday, noHoursOverlay: c.noHoursOverlay, noMinutesOverlay: c.noMinutesOverlay, disabledWeekDays: c.disabledWeekDays, allowedDates: c.allowedDates, showNowButton: c.showNowButton, nowButtonLabel: c.nowButtonLabel, monthChangeOnScroll: c.monthChangeOnScroll, markers: c.markers, uid: c.uid, modeHeight: c.modeHeight, enableSeconds: c.enableSeconds, secondsIncrement: c.secondsIncrement, secondsGridIncrement: c.secondsGridIncrement, noSecondsOverlay: c.noSecondsOverlay, escClose: c.escClose, spaceConfirm: c.spaceConfirm, monthChangeOnArrows: c.monthChangeOnArrows, textInput: c.textInput, disabled: c.disabled, readonly: c.readonly, multiDates: c.multiDates, presetRanges: c.presetRanges, flow: c.flow, preventMinMaxNavigation: c.preventMinMaxNavigation, minRange: c.minRange, maxRange: c.maxRange, fixedStart: c.fixedStart, fixedEnd: c.fixedEnd, multiDatesLimit: c.multiDatesLimit, reverseYears: c.reverseYears, keepActionRow: c.keepActionRow, weekPicker: c.weekPicker, noSwipe: c.noSwipe, vertical: c.vertical, arrowNavigation: c.arrowNavigation, yearPicker: c.yearPicker, disableTimeRangeValidation: c.disableTimeRangeValidation, dayNames: c.dayNames, modelAuto: c.modelAuto }, { internalModelValue: unref(C), "onUpdate:internalModelValue": re[2] || (re[2] = (fe) => isRef(C) ? C.value = fe : null), onClosePicker: Pe, onSelectDate: Oe, onDpOpen: unref(r), onAutoApply: vt, onTimeUpdate: xe, onFlowStep: re[3] || (re[3] = (fe) => c.$emit("flow-step", fe)), onUpdateMonthYear: re[4] || (re[4] = (fe) => c.$emit("updateMonthYear", fe)) }), createSlots({ _: 2 }, [renderList(unref(V), (fe, ht) => ({ name: fe, fn: withCtx((tt) => [renderSlot(c.$slots, fe, normalizeProps(guardReactiveProps(J({}, tt))))]) }))]), 1040, ["class", "style", "internalModelValue", "onDpOpen"])) : createCommentVNode("", true)], 8, ["to", "disabled"])) : createCommentVNode("", true)], 2));
} });
var gn = (() => {
  const e = eo;
  return e.install = (a) => {
    a.component("Vue3DatePicker", e);
  }, e;
})();
var to = Object.freeze(Object.defineProperty({ __proto__: null, default: gn }, Symbol.toStringTag, { value: "Module" }));
Object.entries(to).forEach(([e, a]) => {
  e !== "default" && (gn[e] = a);
});

// dep:@vuepic_vue-datepicker
var vuepic_vue_datepicker_default = gn;
export {
  vuepic_vue_datepicker_default as default
};
//# sourceMappingURL=@vuepic_vue-datepicker.js.map
